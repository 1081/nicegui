[
  {
    "title": "ui.label: Label",
    "content": "Displays some text.\n\n:param text: the content of the label\n",
    "url": "/documentation/label#label"
  },
  {
    "title": "ui.label: Change Appearance Depending on the Content",
    "content": "You can overwrite the `_handle_text_change` method to update other attributes of a label depending on its content. \nThis technique also works for bindings as shown in the example below.\n",
    "url": "/documentation/label#change_appearance_depending_on_the_content"
  },
  {
    "title": "ui.link: Link",
    "content": "Create a hyperlink.\n\nTo jump to a specific location within a page you can place linkable anchors with `ui.link_target(\"name\")`\nand link to it with `ui.link(target=\"#name\")`.\n\n:param text: display text\n:param target: page function, NiceGUI element on the same page or string that is a an absolute URL or relative path from base URL\n:param new_tab: open link in new tab (default: False)\n",
    "url": "/documentation/link#link"
  },
  {
    "title": "ui.link: Navigate on large pages",
    "content": "To jump to a specific location within a page you can place linkable anchors with `ui.link_target('target_name')`\nor simply pass a NiceGUI element as link target.\n",
    "url": "/documentation/link#navigate_on_large_pages"
  },
  {
    "title": "ui.link: Links to other pages",
    "content": "You can link to other pages by providing the link target as path or function reference.\n",
    "url": "/documentation/link#links_to_other_pages"
  },
  {
    "title": "ui.link: Link from images and other elements",
    "content": "By nesting elements inside a link you can make the whole element clickable.\nThis works with all elements but is most useful for non-interactive elements like \n[ui.image](/documentation/image), [ui.avatar](/documentation/image) etc.\n",
    "url": "/documentation/link#link_from_images_and_other_elements"
  },
  {
    "title": "ui.chatmessage: Chat Message",
    "content": "Based on Quasar's `Chat Message <https://quasar.dev/vue-components/chat/>`_ component.\n\n:param text: the message body (can be a list of strings for multiple message parts)\n:param name: the name of the message author\n:param label: renders a label header/section only\n:param stamp: timestamp of the message\n:param avatar: URL to an avatar\n:param sent: render as a sent message (so from current user) (default: False)\n:param text_html: render text as HTML (default: False)\n",
    "url": "/documentation/chatmessage#chat_message"
  },
  {
    "title": "ui.chatmessage: HTML text",
    "content": "Using the `text_html` parameter, you can send HTML text to the chat.\n",
    "url": "/documentation/chatmessage#html_text"
  },
  {
    "title": "ui.chatmessage: Newline",
    "content": "You can use newlines in the chat message.\n",
    "url": "/documentation/chatmessage#newline"
  },
  {
    "title": "ui.chatmessage: Multi-part messages",
    "content": "You can send multiple message parts by passing a list of strings.\n",
    "url": "/documentation/chatmessage#multi-part_messages"
  },
  {
    "title": "ui.chatmessage: Chat message with child elements",
    "content": "You can add child elements to a chat message.\n",
    "url": "/documentation/chatmessage#chat_message_with_child_elements"
  },
  {
    "title": "ui.element: Generic Element",
    "content": "This class is the base class for all other UI elements.\nBut you can use it to create elements with arbitrary HTML tags.\n\n:param tag: HTML tag of the element\n:param _client: client for this element (for internal use only)\n",
    "url": "/documentation/element#generic_element"
  },
  {
    "title": "ui.element: Move elements",
    "content": "This demo shows how to move elements between or within containers.\n",
    "url": "/documentation/element#move_elements"
  },
  {
    "title": "ui.element: Default props",
    "content": "You can set default props for all elements of a certain class.\nThis way you can avoid repeating the same props over and over again.\n\nDefault props only apply to elements created after the default props were set.\nSubclasses inherit the default props of their parent class.\n",
    "url": "/documentation/element#default_props"
  },
  {
    "title": "ui.element: Default classes",
    "content": "You can set default classes for all elements of a certain class.\nThis way you can avoid repeating the same classes over and over again.\n\nDefault classes only apply to elements created after the default classes were set.\nSubclasses inherit the default classes of their parent class.\n",
    "url": "/documentation/element#default_classes"
  },
  {
    "title": "ui.element: Default style",
    "content": "You can set a default style for all elements of a certain class.\nThis way you can avoid repeating the same style over and over again.\n\nA default style only applies to elements created after the default style was set.\nSubclasses inherit the default style of their parent class.\n",
    "url": "/documentation/element#default_style"
  },
  {
    "title": "ui.markdown: Markdown Element",
    "content": "Renders Markdown onto the page.\n\n:param content: the Markdown content to be displayed\n:param extras: list of `markdown2 extensions <https://github.com/trentm/python-markdown2/wiki/Extras#implemented-extras>`_ (default: `['fenced-code-blocks', 'tables']`)\n",
    "url": "/documentation/markdown#markdown_element"
  },
  {
    "title": "ui.markdown: Markdown with indentation",
    "content": "Common indentation is automatically stripped from the beginning of each line.\nSo you can indent markdown elements, and they will still be rendered correctly.\n",
    "url": "/documentation/markdown#markdown_with_indentation"
  },
  {
    "title": "ui.markdown: Markdown with code blocks",
    "content": "You can use code blocks to show code examples.\nIf you specify the language after the opening triple backticks, the code will be syntax highlighted.\nSee [the Pygments website](https://pygments.org/languages/) for a list of supported languages.\n",
    "url": "/documentation/markdown#markdown_with_code_blocks"
  },
  {
    "title": "ui.markdown: Markdown tables",
    "content": "By activating the \"tables\" extra, you can use Markdown tables.\nSee the [markdown2 documentation](https://github.com/trentm/python-markdown2/wiki/Extras#implemented-extras) for a list of available extras.\n",
    "url": "/documentation/markdown#markdown_tables"
  },
  {
    "title": "ui.mermaid: Mermaid Diagrams",
    "content": "Renders diagrams and charts written in the Markdown-inspired `Mermaid <https://mermaid.js.org/>`_ language.\nThe mermaid syntax can also be used inside Markdown elements by providing the extension string 'mermaid' to the ``ui.markdown`` element.\n\n:param content: the Mermaid content to be displayed\n",
    "url": "/documentation/mermaid#mermaid_diagrams"
  },
  {
    "title": "ui.html: HTML Element",
    "content": "Renders arbitrary HTML onto the page.\n`Tailwind <https://tailwindcss.com/>`_ can be used for styling.\nYou can also use `ui.add_head_html` to add html code into the head of the document and `ui.add_body_html`\nto add it into the body.\n\n:param content: the HTML code to be displayed\n",
    "url": "/documentation/html#html_element"
  },
  {
    "title": "Text Elements: Label",
    "content": "Displays some text.\n\n:param text: the content of the label\n",
    "url": "/documentation/section_text_elements#label"
  },
  {
    "title": "Text Elements: Link",
    "content": "Create a hyperlink.\n\nTo jump to a specific location within a page you can place linkable anchors with `ui.link_target(\"name\")`\nand link to it with `ui.link(target=\"#name\")`.\n\n:param text: display text\n:param target: page function, NiceGUI element on the same page or string that is a an absolute URL or relative path from base URL\n:param new_tab: open link in new tab (default: False)\n",
    "url": "/documentation/section_text_elements#link"
  },
  {
    "title": "Text Elements: Chat Message",
    "content": "Based on Quasar's `Chat Message <https://quasar.dev/vue-components/chat/>`_ component.\n\n:param text: the message body (can be a list of strings for multiple message parts)\n:param name: the name of the message author\n:param label: renders a label header/section only\n:param stamp: timestamp of the message\n:param avatar: URL to an avatar\n:param sent: render as a sent message (so from current user) (default: False)\n:param text_html: render text as HTML (default: False)\n",
    "url": "/documentation/section_text_elements#chat_message"
  },
  {
    "title": "Text Elements: Generic Element",
    "content": "This class is the base class for all other UI elements.\nBut you can use it to create elements with arbitrary HTML tags.\n\n:param tag: HTML tag of the element\n:param _client: client for this element (for internal use only)\n",
    "url": "/documentation/section_text_elements#generic_element"
  },
  {
    "title": "Text Elements: Markdown Element",
    "content": "Renders Markdown onto the page.\n\n:param content: the Markdown content to be displayed\n:param extras: list of `markdown2 extensions <https://github.com/trentm/python-markdown2/wiki/Extras#implemented-extras>`_ (default: `['fenced-code-blocks', 'tables']`)\n",
    "url": "/documentation/section_text_elements#markdown_element"
  },
  {
    "title": "Text Elements: Mermaid Diagrams",
    "content": "Renders diagrams and charts written in the Markdown-inspired `Mermaid <https://mermaid.js.org/>`_ language.\nThe mermaid syntax can also be used inside Markdown elements by providing the extension string 'mermaid' to the ``ui.markdown`` element.\n\n:param content: the Mermaid content to be displayed\n",
    "url": "/documentation/section_text_elements#mermaid_diagrams"
  },
  {
    "title": "Text Elements: HTML Element",
    "content": "Renders arbitrary HTML onto the page.\n`Tailwind <https://tailwindcss.com/>`_ can be used for styling.\nYou can also use `ui.add_head_html` to add html code into the head of the document and `ui.add_body_html`\nto add it into the body.\n\n:param content: the HTML code to be displayed\n",
    "url": "/documentation/section_text_elements#html_element"
  },
  {
    "title": "ui.button: Button",
    "content": "This element is based on Quasar's `QBtn <https://quasar.dev/vue-components/button>`_ component.\n\nThe ``color`` parameter accepts a Quasar color, a Tailwind color, or a CSS color.\nIf a Quasar color is used, the button will be styled according to the Quasar theme including the color of the text.\nNote that there are colors like \"red\" being both a Quasar color and a CSS color.\nIn such cases the Quasar color will be used.\n\n:param text: the label of the button\n:param on_click: callback which is invoked when button is pressed\n:param color: the color of the button (either a Quasar, Tailwind, or CSS color or `None`, default: 'primary')\n:param icon: the name of an icon to be displayed on the button (default: `None`)\n",
    "url": "/documentation/button#button"
  },
  {
    "title": "ui.button: Icons",
    "content": "You can also add an icon to a button.\n",
    "url": "/documentation/button#icons"
  },
  {
    "title": "ui.button: Await button click",
    "content": "Sometimes it is convenient to wait for a button click before continuing the execution.\n",
    "url": "/documentation/button#await_button_click"
  },
  {
    "title": "ui.button: Disable button with a context manager",
    "content": "This showcases a context manager that can be used to disable a button for the duration of an async process.\n",
    "url": "/documentation/button#disable_button_with_a_context_manager"
  },
  {
    "title": "ui.badge: Badge",
    "content": "A badge element wrapping Quasar's\n`QBadge <https://quasar.dev/vue-components/badge>`_ component.\n\n:param text: the initial value of the text field\n:param color: the color name for component (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n:param text_color: text color (either a Quasar, Tailwind, or CSS color or `None`, default: `None`)\n:param outline: use 'outline' design (colored text and borders only) (default: False)\n",
    "url": "/documentation/badge#badge"
  },
  {
    "title": "ui.toggle: Toggle",
    "content": "This element is based on Quasar's `QBtnToggle <https://quasar.dev/vue-components/button-toggle>`_ component.\n\nThe options can be specified as a list of values, or as a dictionary mapping values to labels.\nAfter manipulating the options, call `update()` to update the options in the UI.\n\n:param options: a list ['value1', ...] or dictionary `{'value1':'label1', ...}` specifying the options\n:param value: the initial value\n:param on_change: callback to execute when selection changes\n:param clearable: whether the toggle can be cleared by clicking the selected option\n",
    "url": "/documentation/toggle#toggle"
  },
  {
    "title": "ui.radio: Radio Selection",
    "content": "This element is based on Quasar's `QRadio <https://quasar.dev/vue-components/radio>`_ component.\n\nThe options can be specified as a list of values, or as a dictionary mapping values to labels.\nAfter manipulating the options, call `update()` to update the options in the UI.\n\n:param options: a list ['value1', ...] or dictionary `{'value1':'label1', ...}` specifying the options\n:param value: the initial value\n:param on_change: callback to execute when selection changes\n",
    "url": "/documentation/radio#radio_selection"
  },
  {
    "title": "ui.select: Dropdown Selection",
    "content": "This element is based on Quasar's `QSelect <https://quasar.dev/vue-components/select>`_ component.\n\nThe options can be specified as a list of values, or as a dictionary mapping values to labels.\nAfter manipulating the options, call `update()` to update the options in the UI.\n\nIf `with_input` is True, an input field is shown to filter the options.\n\nIf `new_value_mode` is not None, it implies `with_input=True` and the user can enter new values in the input field.\nSee `Quasar's documentation <https://quasar.dev/vue-components/select#the-new-value-mode-prop>`_ for details.\nNote that this mode is ineffective when setting the `value` property programmatically.\n\n:param options: a list ['value1', ...] or dictionary `{'value1':'label1', ...}` specifying the options\n:param label: the label to display above the selection\n:param value: the initial value\n:param on_change: callback to execute when selection changes\n:param with_input: whether to show an input field to filter the options\n:param new_value_mode: handle new values from user input (default: None, i.e. no new values)\n:param multiple: whether to allow multiple selections\n:param clearable: whether to add a button to clear the selection\n",
    "url": "/documentation/select#dropdown_selection"
  },
  {
    "title": "ui.select: Search-as-you-type",
    "content": "You can activate `with_input` to get a text input with autocompletion.\nThe options will be filtered as you type.\n",
    "url": "/documentation/select#search-as-you-type"
  },
  {
    "title": "ui.select: Multi selection",
    "content": "You can activate `multiple` to allow the selection of more than one item.\n",
    "url": "/documentation/select#multi_selection"
  },
  {
    "title": "ui.select: Update options",
    "content": "Options can be changed with the `options` property.\nBut then you also need to call `update()` afterwards to let the change take effect.\n`set_options` is a shortcut that does both and works well for lambdas.\n",
    "url": "/documentation/select#update_options"
  },
  {
    "title": "ui.checkbox: Checkbox",
    "content": "This element is based on Quasar's `QCheckbox <https://quasar.dev/vue-components/checkbox>`_ component.\n\n:param text: the label to display next to the checkbox\n:param value: whether it should be checked initially (default: `False`)\n:param on_change: callback to execute when value changes\n",
    "url": "/documentation/checkbox#checkbox"
  },
  {
    "title": "ui.switch: Switch",
    "content": "This element is based on Quasar's `QToggle <https://quasar.dev/vue-components/toggle>`_ component.\n\n:param text: the label to display next to the switch\n:param value: whether it should be active initially (default: `False`)\n:param on_change: callback which is invoked when state is changed by the user\n",
    "url": "/documentation/switch#switch"
  },
  {
    "title": "ui.slider: Slider",
    "content": "This element is based on Quasar's `QSlider <https://quasar.dev/vue-components/slider>`_ component.\n\n:param min: lower bound of the slider\n:param max: upper bound of the slider\n:param step: step size\n:param value: initial value to set position of the slider\n:param on_change: callback which is invoked when the user releases the slider\n",
    "url": "/documentation/slider#slider"
  },
  {
    "title": "ui.slider: Throttle events with leading and trailing options",
    "content": "By default the value change event of a slider is throttled to 0.05 seconds.\nThis means that if you move the slider quickly, the value will only be updated every 0.05 seconds.\n\nBy default both \"leading\" and \"trailing\" events are activated.\nThis means that the very first event is triggered immediately, and the last event is triggered after the throttle time.\n\nThis demo shows how disabling either of these options changes the behavior.\nTo see the effect more clearly, the throttle time is set to 1 second.\nThe first slider shows the default behavior, the second one only sends leading events, and the third only sends trailing events.\n",
    "url": "/documentation/slider#throttle_events_with_leading_and_trailing_options"
  },
  {
    "title": "ui.slider: Disable slider",
    "content": "You can disable a slider with the `disable()` method.\nThis will prevent the user from moving the slider.\nThe slider will also be grayed out.\n",
    "url": "/documentation/slider#disable_slider"
  },
  {
    "title": "ui.joystick: Joystick",
    "content": "Create a joystick based on `nipple.js <https://yoannmoi.net/nipplejs/>`_.\n\n:param on_start: callback for when the user touches the joystick\n:param on_move: callback for when the user moves the joystick\n:param on_end: callback for when the user releases the joystick\n:param throttle: throttle interval in seconds for the move event (default: 0.05)\n:param options: arguments like `color` which should be passed to the `underlying nipple.js library <https://github.com/yoannmoinet/nipplejs#options>`_\n",
    "url": "/documentation/joystick#joystick"
  },
  {
    "title": "ui.input: Text Input",
    "content": "This element is based on Quasar's `QInput <https://quasar.dev/vue-components/input>`_ component.\n\nThe `on_change` event is called on every keystroke and the value updates accordingly.\nIf you want to wait until the user confirms the input, you can register a custom event callback, e.g.\n`ui.input(...).on('keydown.enter', ...)` or `ui.input(...).on('blur', ...)`.\n\nYou can use the `validation` parameter to define a dictionary of validation rules.\nThe key of the first rule that fails will be displayed as an error message.\n\nNote about styling the input:\nQuasar's `QInput` component is a wrapper around a native `input` element.\nThis means that you cannot style the input directly,\nbut you can use the `input-class` and `input-style` props to style the native input element.\nSee the \"Style\" props section on the `QInput <https://quasar.dev/vue-components/input>`_ documentation for more details.\n\n:param label: displayed label for the text input\n:param placeholder: text to show if no value is entered\n:param value: the current value of the text input\n:param password: whether to hide the input (default: False)\n:param password_toggle_button: whether to show a button to toggle the password visibility (default: False)\n:param on_change: callback to execute when the value changes\n:param autocomplete: optional list of strings for autocompletion\n:param validation: dictionary of validation rules, e.g. ``{'Too long!': lambda value: len(value) < 3}``\n",
    "url": "/documentation/input#text_input"
  },
  {
    "title": "ui.input: Autocompletion",
    "content": "The `autocomplete` feature provides suggestions as you type, making input easier and faster.\nThe parameter `options` is a list of strings that contains the available options that will appear.\n",
    "url": "/documentation/input#autocompletion"
  },
  {
    "title": "ui.input: Clearable",
    "content": "The `clearable` prop from [Quasar](https://quasar.dev/) adds a button to the input that clears the text.    \n",
    "url": "/documentation/input#clearable"
  },
  {
    "title": "ui.input: Styling",
    "content": "Quasar has a lot of [props to change the appearance](https://quasar.dev/vue-components/input).\nIt is even possible to style the underlying input with `input-style` and `input-class` props\nand use the provided slots to add custom elements.\n",
    "url": "/documentation/input#styling"
  },
  {
    "title": "ui.textarea: Textarea",
    "content": "This element is based on Quasar's `QInput <https://quasar.dev/vue-components/input>`_ component.\nThe ``type`` is set to ``textarea`` to create a multi-line text input.\n\nYou can use the `validation` parameter to define a dictionary of validation rules.\nThe key of the first rule that fails will be displayed as an error message.\n\n:param label: displayed name for the textarea\n:param placeholder: text to show if no value is entered\n:param value: the initial value of the field\n:param on_change: callback to execute when the value changes\n:param validation: dictionary of validation rules, e.g. ``{'Too long!': lambda value: len(value) < 3}``\n",
    "url": "/documentation/textarea#textarea"
  },
  {
    "title": "ui.textarea: Clearable",
    "content": "The `clearable` prop from [Quasar](https://quasar.dev/) adds a button to the input that clears the text.    \n",
    "url": "/documentation/textarea#clearable"
  },
  {
    "title": "ui.number: Number Input",
    "content": "This element is based on Quasar's `QInput <https://quasar.dev/vue-components/input>`_ component.\n\nYou can use the `validation` parameter to define a dictionary of validation rules.\nThe key of the first rule that fails will be displayed as an error message.\n\n:param label: displayed name for the number input\n:param placeholder: text to show if no value is entered\n:param value: the initial value of the field\n:param min: the minimum value allowed\n:param max: the maximum value allowed\n:param precision: the number of decimal places allowed (default: no limit, negative: decimal places before the dot)\n:param step: the step size for the stepper buttons\n:param prefix: a prefix to prepend to the displayed value\n:param suffix: a suffix to append to the displayed value\n:param format: a string like \"%.2f\" to format the displayed value\n:param on_change: callback to execute when the value changes\n:param validation: dictionary of validation rules, e.g. ``{'Too large!': lambda value: value < 3}``\n",
    "url": "/documentation/number#number_input"
  },
  {
    "title": "ui.number: Clearable",
    "content": "The `clearable` prop from [Quasar](https://quasar.dev/) adds a button to the input that clears the text.    \n",
    "url": "/documentation/number#clearable"
  },
  {
    "title": "ui.number: Number of decimal places",
    "content": "You can specify the number of decimal places using the `precision` parameter.\nA negative value means decimal places before the dot.\nThe rounding takes place when the input loses focus,\nwhen sanitization parameters like min, max or precision change,\nor when `sanitize()` is called manually.\n",
    "url": "/documentation/number#number_of_decimal_places"
  },
  {
    "title": "ui.knob: Knob",
    "content": "This element is based on Quasar's `QKnob <https://quasar.dev/vue-components/knob>`_ component.\nThe element is used to take a number input from the user through mouse/touch panning.\n\n:param value: the initial value (default: 0.0)\n:param min: the minimum value (default: 0.0)\n:param max: the maximum value (default: 1.0)\n:param step: the step size (default: 0.01)\n:param color: knob color (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n:param center_color: color name for the center part of the component, examples: primary, teal-10\n:param track_color: color name for the track of the component, examples: primary, teal-10\n:param size: size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl), examples: 16px, 2rem\n:param show_value: whether to show the value as text\n:param on_change: callback to execute when the value changes\n",
    "url": "/documentation/knob#knob"
  },
  {
    "title": "ui.colorinput: Color Input",
    "content": "This element extends Quasar's `QInput <https://quasar.dev/vue-components/input>`_ component with a color picker.\n\n:param label: displayed label for the color input\n:param placeholder: text to show if no color is selected\n:param value: the current color value\n:param on_change: callback to execute when the value changes\n:param preview: change button background to selected color (default: False)\n",
    "url": "/documentation/colorinput#color_input"
  },
  {
    "title": "ui.colorpicker: Color Picker",
    "content": "This element is based on Quasar's `QMenu <https://quasar.dev/vue-components/menu>`_ and\n`QColor <https://quasar.dev/vue-components/color>`_ components.\n\n:param on_pick: callback to execute when a color is picked\n:param value: whether the menu is already opened (default: `False`)\n",
    "url": "/documentation/colorpicker#color_picker"
  },
  {
    "title": "ui.date: Date Input",
    "content": "This element is based on Quasar's `QDate <https://quasar.dev/vue-components/date>`_ component.\nThe date is a string in the format defined by the `mask` parameter.\n\nYou can also use the `range` or `multiple` props to select a range of dates or multiple dates::\n\n    ui.date({'from': '2023-01-01', 'to': '2023-01-05'}).props('range')\n    ui.date(['2023-01-01', '2023-01-02', '2023-01-03']).props('multiple')\n    ui.date([{'from': '2023-01-01', 'to': '2023-01-05'}, '2023-01-07']).props('multiple range')\n\n:param value: the initial date\n:param mask: the format of the date string (default: 'YYYY-MM-DD')\n:param on_change: callback to execute when changing the date\n",
    "url": "/documentation/date#date_input"
  },
  {
    "title": "ui.date: Input element with date picker",
    "content": "This demo shows how to implement a date picker with an input element.\nWe place an icon in the input element's append slot.\nWhen the icon is clicked, we open a menu with a date picker.\n\nThe date is bound to the input element's value.\nSo both the input element and the date picker will stay in sync whenever the date is changed.\n",
    "url": "/documentation/date#input_element_with_date_picker"
  },
  {
    "title": "ui.date: Date filter",
    "content": "This demo shows how to filter the dates in a date picker.\nIn order to pass a function to the date picker, we use the `:options` property.\nThe leading `:` tells NiceGUI that the value is a JavaScript expression.\n",
    "url": "/documentation/date#date_filter"
  },
  {
    "title": "ui.time: Time Input",
    "content": "This element is based on Quasar's `QTime <https://quasar.dev/vue-components/date>`_ component.\nThe time is a string in the format defined by the `mask` parameter.\n\n:param value: the initial time\n:param mask: the format of the time string (default: 'HH:mm')\n:param on_change: callback to execute when changing the time\n",
    "url": "/documentation/time#time_input"
  },
  {
    "title": "ui.upload: File Upload",
    "content": "Based on Quasar's `QUploader <https://quasar.dev/vue-components/uploader>`_ component.\n\n:param multiple: allow uploading multiple files at once (default: `False`)\n:param max_file_size: maximum file size in bytes (default: `0`)\n:param max_total_size: maximum total size of all files in bytes (default: `0`)\n:param max_files: maximum number of files (default: `0`)\n:param on_upload: callback to execute for each uploaded file (type: nicegui.events.UploadEventArguments)\n:param on_rejected: callback to execute for each rejected file\n:param label: label for the uploader (default: `''`)\n:param auto_upload: automatically upload files when they are selected (default: `False`)\n",
    "url": "/documentation/upload#file_upload"
  },
  {
    "title": "ui.upload: Upload restrictions",
    "content": "In this demo, the upload is restricted to a maximum file size of 1 MB.\nWhen a file is rejected, a notification is shown.\n",
    "url": "/documentation/upload#upload_restrictions"
  },
  {
    "title": "ui.upload: Show file content",
    "content": "In this demo, the uploaded markdown file is shown in a dialog.\n",
    "url": "/documentation/upload#show_file_content"
  },
  {
    "title": "Controls: Button",
    "content": "This element is based on Quasar's `QBtn <https://quasar.dev/vue-components/button>`_ component.\n\nThe ``color`` parameter accepts a Quasar color, a Tailwind color, or a CSS color.\nIf a Quasar color is used, the button will be styled according to the Quasar theme including the color of the text.\nNote that there are colors like \"red\" being both a Quasar color and a CSS color.\nIn such cases the Quasar color will be used.\n\n:param text: the label of the button\n:param on_click: callback which is invoked when button is pressed\n:param color: the color of the button (either a Quasar, Tailwind, or CSS color or `None`, default: 'primary')\n:param icon: the name of an icon to be displayed on the button (default: `None`)\n",
    "url": "/documentation/section_controls#button"
  },
  {
    "title": "Controls: Badge",
    "content": "A badge element wrapping Quasar's\n`QBadge <https://quasar.dev/vue-components/badge>`_ component.\n\n:param text: the initial value of the text field\n:param color: the color name for component (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n:param text_color: text color (either a Quasar, Tailwind, or CSS color or `None`, default: `None`)\n:param outline: use 'outline' design (colored text and borders only) (default: False)\n",
    "url": "/documentation/section_controls#badge"
  },
  {
    "title": "Controls: Toggle",
    "content": "This element is based on Quasar's `QBtnToggle <https://quasar.dev/vue-components/button-toggle>`_ component.\n\nThe options can be specified as a list of values, or as a dictionary mapping values to labels.\nAfter manipulating the options, call `update()` to update the options in the UI.\n\n:param options: a list ['value1', ...] or dictionary `{'value1':'label1', ...}` specifying the options\n:param value: the initial value\n:param on_change: callback to execute when selection changes\n:param clearable: whether the toggle can be cleared by clicking the selected option\n",
    "url": "/documentation/section_controls#toggle"
  },
  {
    "title": "Controls: Radio Selection",
    "content": "This element is based on Quasar's `QRadio <https://quasar.dev/vue-components/radio>`_ component.\n\nThe options can be specified as a list of values, or as a dictionary mapping values to labels.\nAfter manipulating the options, call `update()` to update the options in the UI.\n\n:param options: a list ['value1', ...] or dictionary `{'value1':'label1', ...}` specifying the options\n:param value: the initial value\n:param on_change: callback to execute when selection changes\n",
    "url": "/documentation/section_controls#radio_selection"
  },
  {
    "title": "Controls: Dropdown Selection",
    "content": "This element is based on Quasar's `QSelect <https://quasar.dev/vue-components/select>`_ component.\n\nThe options can be specified as a list of values, or as a dictionary mapping values to labels.\nAfter manipulating the options, call `update()` to update the options in the UI.\n\nIf `with_input` is True, an input field is shown to filter the options.\n\nIf `new_value_mode` is not None, it implies `with_input=True` and the user can enter new values in the input field.\nSee `Quasar's documentation <https://quasar.dev/vue-components/select#the-new-value-mode-prop>`_ for details.\nNote that this mode is ineffective when setting the `value` property programmatically.\n\n:param options: a list ['value1', ...] or dictionary `{'value1':'label1', ...}` specifying the options\n:param label: the label to display above the selection\n:param value: the initial value\n:param on_change: callback to execute when selection changes\n:param with_input: whether to show an input field to filter the options\n:param new_value_mode: handle new values from user input (default: None, i.e. no new values)\n:param multiple: whether to allow multiple selections\n:param clearable: whether to add a button to clear the selection\n",
    "url": "/documentation/section_controls#dropdown_selection"
  },
  {
    "title": "Controls: Checkbox",
    "content": "This element is based on Quasar's `QCheckbox <https://quasar.dev/vue-components/checkbox>`_ component.\n\n:param text: the label to display next to the checkbox\n:param value: whether it should be checked initially (default: `False`)\n:param on_change: callback to execute when value changes\n",
    "url": "/documentation/section_controls#checkbox"
  },
  {
    "title": "Controls: Switch",
    "content": "This element is based on Quasar's `QToggle <https://quasar.dev/vue-components/toggle>`_ component.\n\n:param text: the label to display next to the switch\n:param value: whether it should be active initially (default: `False`)\n:param on_change: callback which is invoked when state is changed by the user\n",
    "url": "/documentation/section_controls#switch"
  },
  {
    "title": "Controls: Slider",
    "content": "This element is based on Quasar's `QSlider <https://quasar.dev/vue-components/slider>`_ component.\n\n:param min: lower bound of the slider\n:param max: upper bound of the slider\n:param step: step size\n:param value: initial value to set position of the slider\n:param on_change: callback which is invoked when the user releases the slider\n",
    "url": "/documentation/section_controls#slider"
  },
  {
    "title": "Controls: Joystick",
    "content": "Create a joystick based on `nipple.js <https://yoannmoi.net/nipplejs/>`_.\n\n:param on_start: callback for when the user touches the joystick\n:param on_move: callback for when the user moves the joystick\n:param on_end: callback for when the user releases the joystick\n:param throttle: throttle interval in seconds for the move event (default: 0.05)\n:param options: arguments like `color` which should be passed to the `underlying nipple.js library <https://github.com/yoannmoinet/nipplejs#options>`_\n",
    "url": "/documentation/section_controls#joystick"
  },
  {
    "title": "Controls: Text Input",
    "content": "This element is based on Quasar's `QInput <https://quasar.dev/vue-components/input>`_ component.\n\nThe `on_change` event is called on every keystroke and the value updates accordingly.\nIf you want to wait until the user confirms the input, you can register a custom event callback, e.g.\n`ui.input(...).on('keydown.enter', ...)` or `ui.input(...).on('blur', ...)`.\n\nYou can use the `validation` parameter to define a dictionary of validation rules.\nThe key of the first rule that fails will be displayed as an error message.\n\nNote about styling the input:\nQuasar's `QInput` component is a wrapper around a native `input` element.\nThis means that you cannot style the input directly,\nbut you can use the `input-class` and `input-style` props to style the native input element.\nSee the \"Style\" props section on the `QInput <https://quasar.dev/vue-components/input>`_ documentation for more details.\n\n:param label: displayed label for the text input\n:param placeholder: text to show if no value is entered\n:param value: the current value of the text input\n:param password: whether to hide the input (default: False)\n:param password_toggle_button: whether to show a button to toggle the password visibility (default: False)\n:param on_change: callback to execute when the value changes\n:param autocomplete: optional list of strings for autocompletion\n:param validation: dictionary of validation rules, e.g. ``{'Too long!': lambda value: len(value) < 3}``\n",
    "url": "/documentation/section_controls#text_input"
  },
  {
    "title": "Controls: Textarea",
    "content": "This element is based on Quasar's `QInput <https://quasar.dev/vue-components/input>`_ component.\nThe ``type`` is set to ``textarea`` to create a multi-line text input.\n\nYou can use the `validation` parameter to define a dictionary of validation rules.\nThe key of the first rule that fails will be displayed as an error message.\n\n:param label: displayed name for the textarea\n:param placeholder: text to show if no value is entered\n:param value: the initial value of the field\n:param on_change: callback to execute when the value changes\n:param validation: dictionary of validation rules, e.g. ``{'Too long!': lambda value: len(value) < 3}``\n",
    "url": "/documentation/section_controls#textarea"
  },
  {
    "title": "Controls: Number Input",
    "content": "This element is based on Quasar's `QInput <https://quasar.dev/vue-components/input>`_ component.\n\nYou can use the `validation` parameter to define a dictionary of validation rules.\nThe key of the first rule that fails will be displayed as an error message.\n\n:param label: displayed name for the number input\n:param placeholder: text to show if no value is entered\n:param value: the initial value of the field\n:param min: the minimum value allowed\n:param max: the maximum value allowed\n:param precision: the number of decimal places allowed (default: no limit, negative: decimal places before the dot)\n:param step: the step size for the stepper buttons\n:param prefix: a prefix to prepend to the displayed value\n:param suffix: a suffix to append to the displayed value\n:param format: a string like \"%.2f\" to format the displayed value\n:param on_change: callback to execute when the value changes\n:param validation: dictionary of validation rules, e.g. ``{'Too large!': lambda value: value < 3}``\n",
    "url": "/documentation/section_controls#number_input"
  },
  {
    "title": "Controls: Knob",
    "content": "This element is based on Quasar's `QKnob <https://quasar.dev/vue-components/knob>`_ component.\nThe element is used to take a number input from the user through mouse/touch panning.\n\n:param value: the initial value (default: 0.0)\n:param min: the minimum value (default: 0.0)\n:param max: the maximum value (default: 1.0)\n:param step: the step size (default: 0.01)\n:param color: knob color (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n:param center_color: color name for the center part of the component, examples: primary, teal-10\n:param track_color: color name for the track of the component, examples: primary, teal-10\n:param size: size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl), examples: 16px, 2rem\n:param show_value: whether to show the value as text\n:param on_change: callback to execute when the value changes\n",
    "url": "/documentation/section_controls#knob"
  },
  {
    "title": "Controls: Color Input",
    "content": "This element extends Quasar's `QInput <https://quasar.dev/vue-components/input>`_ component with a color picker.\n\n:param label: displayed label for the color input\n:param placeholder: text to show if no color is selected\n:param value: the current color value\n:param on_change: callback to execute when the value changes\n:param preview: change button background to selected color (default: False)\n",
    "url": "/documentation/section_controls#color_input"
  },
  {
    "title": "Controls: Color Picker",
    "content": "This element is based on Quasar's `QMenu <https://quasar.dev/vue-components/menu>`_ and\n`QColor <https://quasar.dev/vue-components/color>`_ components.\n\n:param on_pick: callback to execute when a color is picked\n:param value: whether the menu is already opened (default: `False`)\n",
    "url": "/documentation/section_controls#color_picker"
  },
  {
    "title": "Controls: Date Input",
    "content": "This element is based on Quasar's `QDate <https://quasar.dev/vue-components/date>`_ component.\nThe date is a string in the format defined by the `mask` parameter.\n\nYou can also use the `range` or `multiple` props to select a range of dates or multiple dates::\n\n    ui.date({'from': '2023-01-01', 'to': '2023-01-05'}).props('range')\n    ui.date(['2023-01-01', '2023-01-02', '2023-01-03']).props('multiple')\n    ui.date([{'from': '2023-01-01', 'to': '2023-01-05'}, '2023-01-07']).props('multiple range')\n\n:param value: the initial date\n:param mask: the format of the date string (default: 'YYYY-MM-DD')\n:param on_change: callback to execute when changing the date\n",
    "url": "/documentation/section_controls#date_input"
  },
  {
    "title": "Controls: Time Input",
    "content": "This element is based on Quasar's `QTime <https://quasar.dev/vue-components/date>`_ component.\nThe time is a string in the format defined by the `mask` parameter.\n\n:param value: the initial time\n:param mask: the format of the time string (default: 'HH:mm')\n:param on_change: callback to execute when changing the time\n",
    "url": "/documentation/section_controls#time_input"
  },
  {
    "title": "Controls: File Upload",
    "content": "Based on Quasar's `QUploader <https://quasar.dev/vue-components/uploader>`_ component.\n\n:param multiple: allow uploading multiple files at once (default: `False`)\n:param max_file_size: maximum file size in bytes (default: `0`)\n:param max_total_size: maximum total size of all files in bytes (default: `0`)\n:param max_files: maximum number of files (default: `0`)\n:param on_upload: callback to execute for each uploaded file (type: nicegui.events.UploadEventArguments)\n:param on_rejected: callback to execute for each rejected file\n:param label: label for the uploader (default: `''`)\n:param auto_upload: automatically upload files when they are selected (default: `False`)\n",
    "url": "/documentation/section_controls#file_upload"
  },
  {
    "title": "ui.image: Image",
    "content": "Displays an image.\nThis element is based on Quasar's `QImg <https://quasar.dev/vue-components/img>`_ component.\n\n:param source: the source of the image; can be a URL, local file path, a base64 string or a PIL image\n",
    "url": "/documentation/image#image"
  },
  {
    "title": "ui.image: Local files",
    "content": "You can use local images as well by passing a path to the image file.\n",
    "url": "/documentation/image#local_files"
  },
  {
    "title": "ui.image: Base64 string",
    "content": "You can also use a Base64 string as image source.\n",
    "url": "/documentation/image#base64_string"
  },
  {
    "title": "ui.image: PIL image",
    "content": "You can also use a PIL image as image source.\n",
    "url": "/documentation/image#pil_image"
  },
  {
    "title": "ui.image: Lottie files",
    "content": "You can also use [Lottie files](https://lottiefiles.com/) with animations.\n",
    "url": "/documentation/image#lottie_files"
  },
  {
    "title": "ui.image: Image link",
    "content": "Images can link to another page by wrapping them in a [ui.link](https://nicegui.io/documentation/link).\n",
    "url": "/documentation/image#image_link"
  },
  {
    "title": "ui.image: Force reload",
    "content": "You can force an image to reload by calling the `force_reload` method.\nIt will append a timestamp to the image URL, which will make the browser reload the image.\n",
    "url": "/documentation/image#force_reload"
  },
  {
    "title": "ui.interactiveimage: Interactive Image",
    "content": "Create an image with an SVG overlay that handles mouse events and yields image coordinates.\nIt is also the best choice for non-flickering image updates.\nIf the source URL changes faster than images can be loaded by the browser, some images are simply skipped.\nThereby repeatedly updating the image source will automatically adapt to the available bandwidth.\nSee `OpenCV Webcam <https://github.com/zauberzeug/nicegui/tree/main/examples/opencv_webcam/main.py>`_ for an example.\n\n:param source: the source of the image; can be an URL, local file path or a base64 string\n:param content: SVG content which should be overlaid; viewport has the same dimensions as the image\n:param on_mouse: callback for mouse events (yields `type`, `image_x` and `image_y`)\n:param events: list of JavaScript events to subscribe to (default: `['click']`)\n:param cross: whether to show crosshairs (default: `False`)\n",
    "url": "/documentation/interactiveimage#interactive_image"
  },
  {
    "title": "ui.interactiveimage: Nesting elements",
    "content": "You can nest elements inside an interactive image.\nUse Tailwind classes like \"absolute top-0 left-0\" to position the label absolutely with respect to the image.\nOf course this can be done with plain CSS as well.\n",
    "url": "/documentation/interactiveimage#nesting_elements"
  },
  {
    "title": "ui.interactiveimage: Force reload",
    "content": "You can force an image to reload by calling the `force_reload` method.\nIt will append a timestamp to the image URL, which will make the browser reload the image.\n",
    "url": "/documentation/interactiveimage#force_reload"
  },
  {
    "title": "ui.audio: Audio",
    "content": "Displays an audio player.\n\n:param src: URL or local file path of the audio source\n:param controls: whether to show the audio controls, like play, pause, and volume (default: `True`)\n:param autoplay: whether to start playing the audio automatically (default: `False`)\n:param muted: whether the audio should be initially muted (default: `False`)\n:param loop: whether the audio should loop (default: `False`)\n\nSee `here <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#events>`_\nfor a list of events you can subscribe to using the generic event subscription `on()`.\n",
    "url": "/documentation/audio#audio"
  },
  {
    "title": "ui.audio: Control the audio element",
    "content": "This demo shows how to play, pause and seek programmatically.\n",
    "url": "/documentation/audio#control_the_audio_element"
  },
  {
    "title": "ui.video: Video",
    "content": "Displays a video.\n\n:param src: URL or local file path of the video source\n:param controls: whether to show the video controls, like play, pause, and volume (default: `True`)\n:param autoplay: whether to start playing the video automatically (default: `False`)\n:param muted: whether the video should be initially muted (default: `False`)\n:param loop: whether the video should loop (default: `False`)\n\nSee `here <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#events>`_\nfor a list of events you can subscribe to using the generic event subscription `on()`.\n",
    "url": "/documentation/video#video"
  },
  {
    "title": "ui.video: Control the video element",
    "content": "This demo shows how to play, pause and seek programmatically.\n",
    "url": "/documentation/video#control_the_video_element"
  },
  {
    "title": "ui.icon: Icon",
    "content": "This element is based on Quasar's `QIcon <https://quasar.dev/vue-components/icon>`_ component.\n\n`Here <https://fonts.google.com/icons?icon.set=Material+Icons>`_ is a reference of possible names.\n\n:param name: name of the icon (snake case, e.g. `add_circle`)\n:param size: size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl), examples: 16px, 2rem\n:param color: icon color (either a Quasar, Tailwind, or CSS color or `None`, default: `None`)\n",
    "url": "/documentation/icon#icon"
  },
  {
    "title": "ui.icon: Eva icons",
    "content": "You can use [Eva icons](https://akveo.github.io/eva-icons/) in your app.\n",
    "url": "/documentation/icon#eva_icons"
  },
  {
    "title": "ui.icon: Lottie files",
    "content": "You can also use [Lottie files](https://lottiefiles.com/) with animations.\n",
    "url": "/documentation/icon#lottie_files"
  },
  {
    "title": "ui.avatar: Avatar",
    "content": "A avatar element wrapping Quasar's\n`QAvatar <https://quasar.dev/vue-components/avatar>`_ component.\n\n:param icon: name of the icon or image path with \"img:\" prefix (e.g. \"map\", \"img:path/to/image.png\")\n:param color: background color (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n:param text_color: color name from the Quasar Color Palette (e.g. \"primary\", \"teal-10\")\n:param size: size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl) (e.g. \"16px\", \"2rem\")\n:param font_size: size in CSS units, including unit name, of the content (icon, text) (e.g. \"18px\", \"2rem\")\n:param square: removes border-radius so borders are squared (default: False)\n:param rounded: applies a small standard border-radius for a squared shape of the component (default: False)\n",
    "url": "/documentation/avatar#avatar"
  },
  {
    "title": "ui.avatar: Photos",
    "content": "To use a photo as an avatar, you can use `ui.image` within `ui.avatar`.\n",
    "url": "/documentation/avatar#photos"
  },
  {
    "title": "Audiovisual Elements: Image",
    "content": "Displays an image.\nThis element is based on Quasar's `QImg <https://quasar.dev/vue-components/img>`_ component.\n\n:param source: the source of the image; can be a URL, local file path, a base64 string or a PIL image\n",
    "url": "/documentation/section_audiovisual_elements#image"
  },
  {
    "title": "Audiovisual Elements: Captions and Overlays",
    "content": "By nesting elements inside a `ui.image` you can create augmentations.\n\nUse [Quasar classes](https://quasar.dev/vue-components/img) for positioning and styling captions.\nTo overlay an SVG, make the `viewBox` exactly the size of the image and provide `100%` width/height to match the actual rendered size.\n",
    "url": "/documentation/section_audiovisual_elements#captions_and_overlays"
  },
  {
    "title": "Audiovisual Elements: Interactive Image",
    "content": "Create an image with an SVG overlay that handles mouse events and yields image coordinates.\nIt is also the best choice for non-flickering image updates.\nIf the source URL changes faster than images can be loaded by the browser, some images are simply skipped.\nThereby repeatedly updating the image source will automatically adapt to the available bandwidth.\nSee `OpenCV Webcam <https://github.com/zauberzeug/nicegui/tree/main/examples/opencv_webcam/main.py>`_ for an example.\n\n:param source: the source of the image; can be an URL, local file path or a base64 string\n:param content: SVG content which should be overlaid; viewport has the same dimensions as the image\n:param on_mouse: callback for mouse events (yields `type`, `image_x` and `image_y`)\n:param events: list of JavaScript events to subscribe to (default: `['click']`)\n:param cross: whether to show crosshairs (default: `False`)\n",
    "url": "/documentation/section_audiovisual_elements#interactive_image"
  },
  {
    "title": "Audiovisual Elements: Audio",
    "content": "Displays an audio player.\n\n:param src: URL or local file path of the audio source\n:param controls: whether to show the audio controls, like play, pause, and volume (default: `True`)\n:param autoplay: whether to start playing the audio automatically (default: `False`)\n:param muted: whether the audio should be initially muted (default: `False`)\n:param loop: whether the audio should loop (default: `False`)\n\nSee `here <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#events>`_\nfor a list of events you can subscribe to using the generic event subscription `on()`.\n",
    "url": "/documentation/section_audiovisual_elements#audio"
  },
  {
    "title": "Audiovisual Elements: Video",
    "content": "Displays a video.\n\n:param src: URL or local file path of the video source\n:param controls: whether to show the video controls, like play, pause, and volume (default: `True`)\n:param autoplay: whether to start playing the video automatically (default: `False`)\n:param muted: whether the video should be initially muted (default: `False`)\n:param loop: whether the video should loop (default: `False`)\n\nSee `here <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#events>`_\nfor a list of events you can subscribe to using the generic event subscription `on()`.\n",
    "url": "/documentation/section_audiovisual_elements#video"
  },
  {
    "title": "Audiovisual Elements: Icon",
    "content": "This element is based on Quasar's `QIcon <https://quasar.dev/vue-components/icon>`_ component.\n\n`Here <https://fonts.google.com/icons?icon.set=Material+Icons>`_ is a reference of possible names.\n\n:param name: name of the icon (snake case, e.g. `add_circle`)\n:param size: size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl), examples: 16px, 2rem\n:param color: icon color (either a Quasar, Tailwind, or CSS color or `None`, default: `None`)\n",
    "url": "/documentation/section_audiovisual_elements#icon"
  },
  {
    "title": "Audiovisual Elements: Avatar",
    "content": "A avatar element wrapping Quasar's\n`QAvatar <https://quasar.dev/vue-components/avatar>`_ component.\n\n:param icon: name of the icon or image path with \"img:\" prefix (e.g. \"map\", \"img:path/to/image.png\")\n:param color: background color (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n:param text_color: color name from the Quasar Color Palette (e.g. \"primary\", \"teal-10\")\n:param size: size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl) (e.g. \"16px\", \"2rem\")\n:param font_size: size in CSS units, including unit name, of the content (icon, text) (e.g. \"18px\", \"2rem\")\n:param square: removes border-radius so borders are squared (default: False)\n:param rounded: applies a small standard border-radius for a squared shape of the component (default: False)\n",
    "url": "/documentation/section_audiovisual_elements#avatar"
  },
  {
    "title": "Audiovisual Elements: SVG",
    "content": "You can add Scalable Vector Graphics using the `ui.html` element.\n",
    "url": "/documentation/section_audiovisual_elements#svg"
  },
  {
    "title": "ui.table: Table",
    "content": "A table based on Quasar's `QTable <https://quasar.dev/vue-components/table>`_ component.\n\n:param columns: list of column objects\n:param rows: list of row objects\n:param row_key: name of the column containing unique data identifying the row (default: \"id\")\n:param title: title of the table\n:param selection: selection type (\"single\" or \"multiple\"; default: `None`)\n:param pagination: a dictionary correlating to a pagination object or number of rows per page (`None` hides the pagination, 0 means \"infinite\"; default: `None`).\n:param on_select: callback which is invoked when the selection changes\n\nIf selection is 'single' or 'multiple', then a `selected` property is accessible containing the selected rows.\n",
    "url": "/documentation/table#table"
  },
  {
    "title": "ui.table: Table with expandable rows",
    "content": "Scoped slots can be used to insert buttons that toggle the expand state of a table row.\nSee the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\n",
    "url": "/documentation/table#table_with_expandable_rows"
  },
  {
    "title": "ui.table: Show and hide columns",
    "content": "Here is an example of how to show and hide columns in a table.\n",
    "url": "/documentation/table#show_and_hide_columns"
  },
  {
    "title": "ui.table: Table with drop down selection",
    "content": "Here is an example of how to use a drop down selection in a table.\nAfter emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\n",
    "url": "/documentation/table#table_with_drop_down_selection"
  },
  {
    "title": "ui.table: Table from Pandas DataFrame",
    "content": "You can create a table from a Pandas DataFrame using the `from_pandas` method. \nThis method takes a Pandas DataFrame as input and returns a table.\n",
    "url": "/documentation/table#table_from_pandas_dataframe"
  },
  {
    "title": "ui.table: Adding rows",
    "content": "It's simple to add new rows with the `add_rows(dict)` method.\n",
    "url": "/documentation/table#adding_rows"
  },
  {
    "title": "ui.table: Custom sorting and formatting",
    "content": "You can define dynamic column attributes using a `:` prefix.\nThis way you can define custom sorting and formatting functions.\n\nThe following example allows sorting the `name` column by length.\nThe `age` column is formatted to show the age in years.\n",
    "url": "/documentation/table#custom_sorting_and_formatting"
  },
  {
    "title": "ui.table: Toggle fullscreen",
    "content": "You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\n",
    "url": "/documentation/table#toggle_fullscreen"
  },
  {
    "title": "ui.table: Pagination",
    "content": "You can provide either a single integer or a dictionary to define pagination.\n\nThe dictionary can contain the following keys:\n\n- `rowsPerPage`: The number of rows per page.\n- `sortBy`: The column name to sort by.\n- `descending`: Whether to sort in descending order.\n- `page`: The current page (1-based).\n",
    "url": "/documentation/table#pagination"
  },
  {
    "title": "ui.table: Computed fields",
    "content": "You can use functions to compute the value of a column.\nThe function receives the row as an argument.\nSee the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\n",
    "url": "/documentation/table#computed_fields"
  },
  {
    "title": "ui.table: Conditional formatting",
    "content": "You can use scoped slots to conditionally format the content of a cell.\nSee the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\nfor more information about body-cell slots.\n\nIn this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\nWe use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\nThe \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\nThe colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\n",
    "url": "/documentation/table#conditional_formatting"
  },
  {
    "title": "ui.table: Table cells with links",
    "content": "Here is a demo of how to insert links into table cells.\nWe use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\n",
    "url": "/documentation/table#table_cells_with_links"
  },
  {
    "title": "ui.aggrid: AG Grid",
    "content": "An element to create a grid using `AG Grid <https://www.ag-grid.com/>`_.\n\nThe methods `call_api_method` and `call_column_api_method` can be used to interact with the AG Grid instance on the client.\n\n:param options: dictionary of AG Grid options\n:param html_columns: list of columns that should be rendered as HTML (default: `[]`)\n:param theme: AG Grid theme (default: 'balham')\n:param auto_size_columns: whether to automatically resize columns to fit the grid width (default: `True`)\n",
    "url": "/documentation/aggrid#ag_grid"
  },
  {
    "title": "ui.aggrid: Select AG Grid Rows",
    "content": "You can add checkboxes to grid cells to allow the user to select single or multiple rows.\n\nTo retrieve the currently selected rows, use the `get_selected_rows` method.\nThis method returns a list of rows as dictionaries.\n\nIf `rowSelection` is set to `'single'` or to get the first selected row,\nyou can also use the `get_selected_row` method.\nThis method returns a single row as a dictionary or `None` if no row is selected.\n\nSee the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\n",
    "url": "/documentation/aggrid#select_ag_grid_rows"
  },
  {
    "title": "ui.aggrid: Filter Rows using Mini Filters",
    "content": "You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\nto the header of each column to filter the rows.\n\nNote how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\nwhile the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\n",
    "url": "/documentation/aggrid#filter_rows_using_mini_filters"
  },
  {
    "title": "ui.aggrid: AG Grid with Conditional Cell Formatting",
    "content": "This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\nto conditionally format cells based on their values.\n",
    "url": "/documentation/aggrid#ag_grid_with_conditional_cell_formatting"
  },
  {
    "title": "ui.aggrid: Create Grid from Pandas DataFrame",
    "content": "You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\nThis method takes a Pandas DataFrame as input and returns an AG Grid.\n",
    "url": "/documentation/aggrid#create_grid_from_pandas_dataframe"
  },
  {
    "title": "ui.aggrid: Render columns as HTML",
    "content": "You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\n",
    "url": "/documentation/aggrid#render_columns_as_html"
  },
  {
    "title": "ui.aggrid: Respond to an AG Grid event",
    "content": "All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\nThese events can be subscribed to using the `.on()` method.\n",
    "url": "/documentation/aggrid#respond_to_an_ag_grid_event"
  },
  {
    "title": "ui.aggrid: AG Grid with complex objects",
    "content": "You can use nested complex objects in AG Grid by separating the field names with a period.\n(This is the reason why keys in `rowData` are not allowed to contain periods.)\n",
    "url": "/documentation/aggrid#ag_grid_with_complex_objects"
  },
  {
    "title": "ui.aggrid: AG Grid with dynamic row height",
    "content": "You can set the height of individual rows by passing a function to the `getRowHeight` argument.\n",
    "url": "/documentation/aggrid#ag_grid_with_dynamic_row_height"
  },
  {
    "title": "ui.highchart: Highcharts chart",
    "content": "An element to create a chart using `Highcharts <https://www.highcharts.com/>`_.\nUpdates can be pushed to the chart by changing the `options` property.\nAfter data has changed, call the `update` method to refresh the chart.\n\nDue to Highcharts' restrictive license, this element is not part of the standard NiceGUI package.\nIt is maintained in a `separate repository <https://github.com/zauberzeug/nicegui-highcharts/>`_\nand can be installed with `pip install nicegui[highcharts]`.\n\nBy default, a `Highcharts.chart` is created.\nTo use, e.g., `Highcharts.stockChart` instead, set the `type` property to \"stockChart\".\n\n:param options: dictionary of Highcharts options\n:param type: chart type (e.g. \"chart\", \"stockChart\", \"mapChart\", ...; default: \"chart\")\n:param extras: list of extra dependencies to include (e.g. \"annotations\", \"arc-diagram\", \"solid-gauge\", ...)\n:param on_point_click: callback function that is called when a point is clicked\n:param on_point_drag_start: callback function that is called when a point drag starts\n:param on_point_drag: callback function that is called when a point is dragged\n:param on_point_drop: callback function that is called when a point is dropped\n",
    "url": "/documentation/highchart#highcharts_chart"
  },
  {
    "title": "ui.highchart: Chart with extra dependencies",
    "content": "To use a chart type that is not included in the default dependencies, you can specify extra dependencies.\nThis demo shows a solid gauge chart.\n",
    "url": "/documentation/highchart#chart_with_extra_dependencies"
  },
  {
    "title": "ui.highchart: Chart with draggable points",
    "content": "This chart allows dragging the series points.\nYou can register callbacks for the following events:\n\n- `on_point_click`: called when a point is clicked\n- `on_point_drag_start`: called when a point drag starts\n- `on_point_drag`: called when a point is dragged\n- `on_point_drop`: called when a point is dropped\n",
    "url": "/documentation/highchart#chart_with_draggable_points"
  },
  {
    "title": "ui.echart: Apache EChart",
    "content": "An element to create a chart using `ECharts <https://echarts.apache.org/>`_.\nUpdates can be pushed to the chart by changing the `options` property.\nAfter data has changed, call the `update` method to refresh the chart.\n\n:param options: dictionary of EChart options\n:param on_click_point: callback function that is called when a point is clicked\n",
    "url": "/documentation/echart#apache_echart"
  },
  {
    "title": "ui.echart: EChart with clickable points",
    "content": "You can register a callback for an event when a series point is clicked.\n",
    "url": "/documentation/echart#echart_with_clickable_points"
  },
  {
    "title": "ui.echart: EChart with dynamic properties",
    "content": "Dynamic properties can be passed to chart elements to customize them such as apply an axis label format.\nTo make a property dynamic, prefix a colon \":\" to the property name.\n",
    "url": "/documentation/echart#echart_with_dynamic_properties"
  },
  {
    "title": "ui.pyplot: Pyplot Context",
    "content": "Create a context to configure a `Matplotlib <https://matplotlib.org/>`_ plot.\n\n:param close: whether the figure should be closed after exiting the context; set to `False` if you want to update it later (default: `True`)\n:param kwargs: arguments like `figsize` which should be passed to `pyplot.figure <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figure.html>`_\n",
    "url": "/documentation/pyplot#pyplot_context"
  },
  {
    "title": "ui.lineplot: Line Plot",
    "content": "Create a line plot using pyplot.\nThe `push` method provides live updating when utilized in combination with `ui.timer`.\n\n:param n: number of lines\n:param limit: maximum number of datapoints per line (new points will displace the oldest)\n:param update_every: update plot only after pushing new data multiple times to save CPU and bandwidth\n:param close: whether the figure should be closed after exiting the context; set to `False` if you want to update it later (default: `True`)\n:param kwargs: arguments like `figsize` which should be passed to `pyplot.figure <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figure.html>`_\n",
    "url": "/documentation/lineplot#line_plot"
  },
  {
    "title": "ui.plotly: Plotly Element",
    "content": "Renders a Plotly chart.\nThere are two ways to pass a Plotly figure for rendering, see parameter `figure`:\n\n* Pass a `go.Figure` object, see https://plotly.com/python/\n\n* Pass a Python `dict` object with keys `data`, `layout`, `config` (optional), see https://plotly.com/javascript/\n\nFor best performance, use the declarative `dict` approach for creating a Plotly chart.\n\n:param figure: Plotly figure to be rendered. Can be either a `go.Figure` instance, or\n               a `dict` object with keys `data`, `layout`, `config` (optional).\n",
    "url": "/documentation/plotly#plotly_element"
  },
  {
    "title": "ui.plotly: Dictionary interface",
    "content": "This demo shows how to use the declarative dictionary interface to create a plot.\nFor plots with many traces and data points, this is more efficient than the object-oriented interface.\nThe definition corresponds to the [JavaScript Plotly API](https://plotly.com/javascript/).\nDue to different defaults, the resulting plot may look slightly different from the same plot created with the object-oriented interface,\nbut the functionality is the same.\n",
    "url": "/documentation/plotly#dictionary_interface"
  },
  {
    "title": "ui.plotly: Plot updates",
    "content": "This demo shows how to update the plot in real time.\nClick the button to add a new trace to the plot.\nTo send the new plot to the browser, make sure to explicitly call `plot.update()` or `ui.update(plot)`.\n",
    "url": "/documentation/plotly#plot_updates"
  },
  {
    "title": "ui.linearprogress: Linear Progress",
    "content": "A linear progress bar wrapping Quasar's\n`QLinearProgress <https://quasar.dev/vue-components/linear-progress>`_ component.\n\n:param value: the initial value of the field (from 0.0 to 1.0)\n:param size: the height of the progress bar (default: \"20px\" with value label and \"4px\" without)\n:param show_value: whether to show a value label in the center (default: `True`)\n:param color: color (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n",
    "url": "/documentation/linearprogress#linear_progress"
  },
  {
    "title": "ui.circularprogress: Circular Progress",
    "content": "A circular progress bar wrapping Quasar's\n`QCircularProgress <https://quasar.dev/vue-components/circular-progress>`_.\n\n:param value: the initial value of the field\n:param min: the minimum value (default: 0.0)\n:param max: the maximum value (default: 1.0)\n:param size: the size of the progress circle (default: \"xl\")\n:param show_value: whether to show a value label in the center (default: `True`)\n:param color: color (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n",
    "url": "/documentation/circularprogress#circular_progress"
  },
  {
    "title": "ui.circularprogress: Nested Elements",
    "content": "You can put any element like icon, button etc inside a circular progress using the `with` statement.\nJust make sure it fits the bounds and disable the default behavior of showing the value.\n",
    "url": "/documentation/circularprogress#nested_elements"
  },
  {
    "title": "ui.spinner: Spinner",
    "content": "This element is based on Quasar's `QSpinner <https://quasar.dev/vue-components/spinners>`_ component.\n\n:param type: type of spinner (e.g. \"audio\", \"ball\", \"bars\", ..., default: \"default\")\n:param size: size of the spinner (e.g. \"3em\", \"10px\", \"xl\", ..., default: \"1em\")\n:param color: color of the spinner (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n:param thickness: thickness of the spinner (applies to the \"default\" spinner only, default: 5.0)\n",
    "url": "/documentation/spinner#spinner"
  },
  {
    "title": "ui.scene: 3D Scene",
    "content": "Display a 3D scene using `three.js <https://threejs.org/>`_.\nCurrently NiceGUI supports boxes, spheres, cylinders/cones, extrusions, straight lines, curves and textured meshes.\nObjects can be translated, rotated and displayed with different color, opacity or as wireframes.\nThey can also be grouped to apply joint movements.\n\n:param width: width of the canvas\n:param height: height of the canvas\n:param grid: whether to display a grid\n:param on_click: callback to execute when a 3D object is clicked\n:param on_drag_start: callback to execute when a 3D object is dragged\n:param on_drag_end: callback to execute when a 3D object is dropped\n:param drag_constraints: comma-separated JavaScript expression for constraining positions of dragged objects (e.g. ``'x = 0, z = y / 2'``)\n",
    "url": "/documentation/scene#3d_scene"
  },
  {
    "title": "ui.scene: Handling Click Events",
    "content": "You can use the `on_click` argument to `ui.scene` to handle click events.\nThe callback receives a `SceneClickEventArguments` object with the following attributes:\n\n- `click_type`: the type of click (\"click\" or \"dblclick\").\n- `button`: the button that was clicked (1, 2, or 3).\n- `alt`, `ctrl`, `meta`, `shift`: whether the alt, ctrl, meta, or shift key was pressed.\n- `hits`: a list of `SceneClickEventHit` objects, sorted by distance from the camera.\n\nThe `SceneClickEventHit` object has the following attributes:\n\n- `object_id`: the id of the object that was clicked.\n- `object_name`: the name of the object that was clicked.\n- `x`, `y`, `z`: the x, y and z coordinates of the click.\n",
    "url": "/documentation/scene#handling_click_events"
  },
  {
    "title": "ui.scene: Draggable objects",
    "content": "You can make objects draggable using the `.draggable` method.\nThere is an optional `on_drag_start` and `on_drag_end` argument to `ui.scene` to handle drag events.\nThe callbacks receive a `SceneDragEventArguments` object with the following attributes:\n\n- `type`: the type of drag event (\"dragstart\" or \"dragend\").\n- `object_id`: the id of the object that was dragged.\n- `object_name`: the name of the object that was dragged.\n- `x`, `y`, `z`: the x, y and z coordinates of the dragged object.\n    \nYou can also use the `drag_constraints` argument to set comma-separated JavaScript expressions\nfor constraining positions of dragged objects.\n",
    "url": "/documentation/scene#draggable_objects"
  },
  {
    "title": "ui.scene: Rendering point clouds",
    "content": "You can render point clouds using the `point_cloud` method.\nThe `points` argument is a list of point coordinates, and the `colors` argument is a list of RGB colors (0..1).\n",
    "url": "/documentation/scene#rendering_point_clouds"
  },
  {
    "title": "ui.tree: Tree",
    "content": "Display hierarchical data using Quasar's `QTree <https://quasar.dev/vue-components/tree>`_ component.\n\nIf using IDs, make sure they are unique within the whole tree.\n\nTo use checkboxes and ``on_tick``, set the ``tick_strategy`` parameter to \"leaf\", \"leaf-filtered\" or \"strict\".\n\n:param nodes: hierarchical list of node objects\n:param node_key: property name of each node object that holds its unique id (default: \"id\")\n:param label_key: property name of each node object that holds its label (default: \"label\")\n:param children_key: property name of each node object that holds its list of children (default: \"children\")\n:param on_select: callback which is invoked when the node selection changes\n:param on_expand: callback which is invoked when the node expansion changes\n:param on_tick: callback which is invoked when a node is ticked or unticked\n:param tick_strategy: whether and how to use checkboxes (\"leaf\", \"leaf-filtered\" or \"strict\"; default: ``None``)\n:param default_expand_all: whether to expand all nodes by default (default: ``False``)\n",
    "url": "/documentation/tree#tree"
  },
  {
    "title": "ui.tree: Tree with custom header and body",
    "content": "Scoped slots can be used to insert custom content into the header and body of a tree node.\nSee the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\n",
    "url": "/documentation/tree#tree_with_custom_header_and_body"
  },
  {
    "title": "ui.tree: Expand and collapse programmatically",
    "content": "The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\nThis even works if a node is disabled (e.g. not clickable by the user).\n",
    "url": "/documentation/tree#expand_and_collapse_programmatically"
  },
  {
    "title": "ui.tree: Tree with checkboxes",
    "content": "The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\n",
    "url": "/documentation/tree#tree_with_checkboxes"
  },
  {
    "title": "ui.log: Log View",
    "content": "Create a log view that allows to add new lines without re-transmitting the whole history to the client.\n\n:param max_lines: maximum number of lines before dropping oldest ones (default: `None`)\n",
    "url": "/documentation/log#log_view"
  },
  {
    "title": "ui.log: Attach to a logger",
    "content": "You can attach a `ui.log` element to a Python logger object so that log messages are pushed to the log element.\n",
    "url": "/documentation/log#attach_to_a_logger"
  },
  {
    "title": "ui.editor: Editor",
    "content": "A WYSIWYG editor based on `Quasar's QEditor <https://quasar.dev/vue-components/editor>`_.\nThe value is a string containing the formatted text as HTML code.\n\n:param value: initial value\n:param on_change: callback to be invoked when the value changes\n",
    "url": "/documentation/editor#editor"
  },
  {
    "title": "ui.code: Code",
    "content": "This element displays a code block with syntax highlighting.\n\n:param content: code to display\n:param language: language of the code (default: \"python\")\n",
    "url": "/documentation/code#code"
  },
  {
    "title": "ui.jsoneditor: JSONEditor",
    "content": "An element to create a JSON editor using `JSONEditor <https://github.com/josdejong/svelte-jsoneditor>`_.\nUpdates can be pushed to the editor by changing the `properties` property.\nAfter data has changed, call the `update` method to refresh the editor.\n\n:param properties: dictionary of JSONEditor properties\n:param on_select: callback function that is called when some of the content has been selected\n:param on_change: callback function that is called when the content has changed\n",
    "url": "/documentation/jsoneditor#jsoneditor"
  },
  {
    "title": "Data elements: Table",
    "content": "A table based on Quasar's `QTable <https://quasar.dev/vue-components/table>`_ component.\n\n:param columns: list of column objects\n:param rows: list of row objects\n:param row_key: name of the column containing unique data identifying the row (default: \"id\")\n:param title: title of the table\n:param selection: selection type (\"single\" or \"multiple\"; default: `None`)\n:param pagination: a dictionary correlating to a pagination object or number of rows per page (`None` hides the pagination, 0 means \"infinite\"; default: `None`).\n:param on_select: callback which is invoked when the selection changes\n\nIf selection is 'single' or 'multiple', then a `selected` property is accessible containing the selected rows.\n",
    "url": "/documentation/section_data_elements#table"
  },
  {
    "title": "Data elements: AG Grid",
    "content": "An element to create a grid using `AG Grid <https://www.ag-grid.com/>`_.\n\nThe methods `call_api_method` and `call_column_api_method` can be used to interact with the AG Grid instance on the client.\n\n:param options: dictionary of AG Grid options\n:param html_columns: list of columns that should be rendered as HTML (default: `[]`)\n:param theme: AG Grid theme (default: 'balham')\n:param auto_size_columns: whether to automatically resize columns to fit the grid width (default: `True`)\n",
    "url": "/documentation/section_data_elements#ag_grid"
  },
  {
    "title": "Data elements: Highcharts chart",
    "content": "An element to create a chart using `Highcharts <https://www.highcharts.com/>`_.\nUpdates can be pushed to the chart by changing the `options` property.\nAfter data has changed, call the `update` method to refresh the chart.\n\nDue to Highcharts' restrictive license, this element is not part of the standard NiceGUI package.\nIt is maintained in a `separate repository <https://github.com/zauberzeug/nicegui-highcharts/>`_\nand can be installed with `pip install nicegui[highcharts]`.\n\nBy default, a `Highcharts.chart` is created.\nTo use, e.g., `Highcharts.stockChart` instead, set the `type` property to \"stockChart\".\n\n:param options: dictionary of Highcharts options\n:param type: chart type (e.g. \"chart\", \"stockChart\", \"mapChart\", ...; default: \"chart\")\n:param extras: list of extra dependencies to include (e.g. \"annotations\", \"arc-diagram\", \"solid-gauge\", ...)\n:param on_point_click: callback function that is called when a point is clicked\n:param on_point_drag_start: callback function that is called when a point drag starts\n:param on_point_drag: callback function that is called when a point is dragged\n:param on_point_drop: callback function that is called when a point is dropped\n",
    "url": "/documentation/section_data_elements#highcharts_chart"
  },
  {
    "title": "Data elements: Apache EChart",
    "content": "An element to create a chart using `ECharts <https://echarts.apache.org/>`_.\nUpdates can be pushed to the chart by changing the `options` property.\nAfter data has changed, call the `update` method to refresh the chart.\n\n:param options: dictionary of EChart options\n:param on_click_point: callback function that is called when a point is clicked\n",
    "url": "/documentation/section_data_elements#apache_echart"
  },
  {
    "title": "Data elements: Pyplot Context",
    "content": "Create a context to configure a `Matplotlib <https://matplotlib.org/>`_ plot.\n\n:param close: whether the figure should be closed after exiting the context; set to `False` if you want to update it later (default: `True`)\n:param kwargs: arguments like `figsize` which should be passed to `pyplot.figure <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figure.html>`_\n",
    "url": "/documentation/section_data_elements#pyplot_context"
  },
  {
    "title": "Data elements: Line Plot",
    "content": "Create a line plot using pyplot.\nThe `push` method provides live updating when utilized in combination with `ui.timer`.\n\n:param n: number of lines\n:param limit: maximum number of datapoints per line (new points will displace the oldest)\n:param update_every: update plot only after pushing new data multiple times to save CPU and bandwidth\n:param close: whether the figure should be closed after exiting the context; set to `False` if you want to update it later (default: `True`)\n:param kwargs: arguments like `figsize` which should be passed to `pyplot.figure <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figure.html>`_\n",
    "url": "/documentation/section_data_elements#line_plot"
  },
  {
    "title": "Data elements: Plotly Element",
    "content": "Renders a Plotly chart.\nThere are two ways to pass a Plotly figure for rendering, see parameter `figure`:\n\n* Pass a `go.Figure` object, see https://plotly.com/python/\n\n* Pass a Python `dict` object with keys `data`, `layout`, `config` (optional), see https://plotly.com/javascript/\n\nFor best performance, use the declarative `dict` approach for creating a Plotly chart.\n\n:param figure: Plotly figure to be rendered. Can be either a `go.Figure` instance, or\n               a `dict` object with keys `data`, `layout`, `config` (optional).\n",
    "url": "/documentation/section_data_elements#plotly_element"
  },
  {
    "title": "Data elements: Linear Progress",
    "content": "A linear progress bar wrapping Quasar's\n`QLinearProgress <https://quasar.dev/vue-components/linear-progress>`_ component.\n\n:param value: the initial value of the field (from 0.0 to 1.0)\n:param size: the height of the progress bar (default: \"20px\" with value label and \"4px\" without)\n:param show_value: whether to show a value label in the center (default: `True`)\n:param color: color (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n",
    "url": "/documentation/section_data_elements#linear_progress"
  },
  {
    "title": "Data elements: Circular Progress",
    "content": "A circular progress bar wrapping Quasar's\n`QCircularProgress <https://quasar.dev/vue-components/circular-progress>`_.\n\n:param value: the initial value of the field\n:param min: the minimum value (default: 0.0)\n:param max: the maximum value (default: 1.0)\n:param size: the size of the progress circle (default: \"xl\")\n:param show_value: whether to show a value label in the center (default: `True`)\n:param color: color (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n",
    "url": "/documentation/section_data_elements#circular_progress"
  },
  {
    "title": "Data elements: Spinner",
    "content": "This element is based on Quasar's `QSpinner <https://quasar.dev/vue-components/spinners>`_ component.\n\n:param type: type of spinner (e.g. \"audio\", \"ball\", \"bars\", ..., default: \"default\")\n:param size: size of the spinner (e.g. \"3em\", \"10px\", \"xl\", ..., default: \"1em\")\n:param color: color of the spinner (either a Quasar, Tailwind, or CSS color or `None`, default: \"primary\")\n:param thickness: thickness of the spinner (applies to the \"default\" spinner only, default: 5.0)\n",
    "url": "/documentation/section_data_elements#spinner"
  },
  {
    "title": "Data elements: 3D Scene",
    "content": "Display a 3D scene using `three.js <https://threejs.org/>`_.\nCurrently NiceGUI supports boxes, spheres, cylinders/cones, extrusions, straight lines, curves and textured meshes.\nObjects can be translated, rotated and displayed with different color, opacity or as wireframes.\nThey can also be grouped to apply joint movements.\n\n:param width: width of the canvas\n:param height: height of the canvas\n:param grid: whether to display a grid\n:param on_click: callback to execute when a 3D object is clicked\n:param on_drag_start: callback to execute when a 3D object is dragged\n:param on_drag_end: callback to execute when a 3D object is dropped\n:param drag_constraints: comma-separated JavaScript expression for constraining positions of dragged objects (e.g. ``'x = 0, z = y / 2'``)\n",
    "url": "/documentation/section_data_elements#3d_scene"
  },
  {
    "title": "Data elements: Tree",
    "content": "Display hierarchical data using Quasar's `QTree <https://quasar.dev/vue-components/tree>`_ component.\n\nIf using IDs, make sure they are unique within the whole tree.\n\nTo use checkboxes and ``on_tick``, set the ``tick_strategy`` parameter to \"leaf\", \"leaf-filtered\" or \"strict\".\n\n:param nodes: hierarchical list of node objects\n:param node_key: property name of each node object that holds its unique id (default: \"id\")\n:param label_key: property name of each node object that holds its label (default: \"label\")\n:param children_key: property name of each node object that holds its list of children (default: \"children\")\n:param on_select: callback which is invoked when the node selection changes\n:param on_expand: callback which is invoked when the node expansion changes\n:param on_tick: callback which is invoked when a node is ticked or unticked\n:param tick_strategy: whether and how to use checkboxes (\"leaf\", \"leaf-filtered\" or \"strict\"; default: ``None``)\n:param default_expand_all: whether to expand all nodes by default (default: ``False``)\n",
    "url": "/documentation/section_data_elements#tree"
  },
  {
    "title": "Data elements: Log View",
    "content": "Create a log view that allows to add new lines without re-transmitting the whole history to the client.\n\n:param max_lines: maximum number of lines before dropping oldest ones (default: `None`)\n",
    "url": "/documentation/section_data_elements#log_view"
  },
  {
    "title": "Data elements: Editor",
    "content": "A WYSIWYG editor based on `Quasar's QEditor <https://quasar.dev/vue-components/editor>`_.\nThe value is a string containing the formatted text as HTML code.\n\n:param value: initial value\n:param on_change: callback to be invoked when the value changes\n",
    "url": "/documentation/section_data_elements#editor"
  },
  {
    "title": "Data elements: Code",
    "content": "This element displays a code block with syntax highlighting.\n\n:param content: code to display\n:param language: language of the code (default: \"python\")\n",
    "url": "/documentation/section_data_elements#code"
  },
  {
    "title": "Data elements: JSONEditor",
    "content": "An element to create a JSON editor using `JSONEditor <https://github.com/josdejong/svelte-jsoneditor>`_.\nUpdates can be pushed to the editor by changing the `properties` property.\nAfter data has changed, call the `update` method to refresh the editor.\n\n:param properties: dictionary of JSONEditor properties\n:param on_select: callback function that is called when some of the content has been selected\n:param on_change: callback function that is called when the content has changed\n",
    "url": "/documentation/section_data_elements#jsoneditor"
  },
  {
    "title": "Binding properties: Bindings",
    "content": "NiceGUI is able to directly bind UI elements to models.\nBinding is possible for UI element properties like text, value or visibility and for model properties that are (nested) class attributes.\nEach element provides methods like `bind_value` and `bind_visibility` to create a two-way binding with the corresponding property.\nTo define a one-way binding use the `_from` and `_to` variants of these methods.\nJust pass a property of the model as parameter to these methods to create the binding.\n",
    "url": "/documentation/section_binding_properties#bindings"
  },
  {
    "title": "Binding properties: Bind to dictionary",
    "content": "Here we are binding the text of labels to a dictionary.\n",
    "url": "/documentation/section_binding_properties#bind_to_dictionary"
  },
  {
    "title": "Binding properties: Bind to variable",
    "content": "Here we are binding the value from the datepicker to a bare variable.\nTherefore we use the dictionary `globals()` which contains all global variables.\nThis demo is based on the [official datepicker example](/documentation/date#input_element_with_date_picker).\n",
    "url": "/documentation/section_binding_properties#bind_to_variable"
  },
  {
    "title": "Binding properties: Bind to storage",
    "content": "Bindings also work with [`app.storage`](/documentation/storage).\nHere we are storing the value of a textarea between visits.\nThe note is also shared between all tabs of the same user.\n",
    "url": "/documentation/section_binding_properties#bind_to_storage"
  },
  {
    "title": "ui.card: Card",
    "content": "This element is based on Quasar's `QCard <https://quasar.dev/vue-components/card>`_ component.\nIt provides a container with a dropped shadow.\n\nNote:\nThere are subtle differences between the Quasar component and this element.\nIn contrast to this element, the original QCard has no padding by default and hides outer borders of nested elements.\nIf you want the original behavior, use the `tight` method.\nIf you want the padding and borders for nested children, move the children into another container.\n",
    "url": "/documentation/card#card"
  },
  {
    "title": "ui.card: Card without shadow",
    "content": "You can remove the shadow from a card by adding the `no-shadow` class.\nThe following demo shows a 1 pixel wide border instead.\n",
    "url": "/documentation/card#card_without_shadow"
  },
  {
    "title": "ui.card: The issue with nested borders",
    "content": "The following example shows a table nested in a card.\nCards have a default padding in NiceGUI, so the table is not flush with the card's border.\nThe table has the `flat` and `bordered` props set, so it should have a border.\nHowever, due to the way QCard is designed, the border is not visible (first card).\nThere are two ways to fix this:\n\n- To get the original QCard behavior, use the `tight` method (second card).\n    It removes the padding and the table border collapses with the card border.\n\n- To preserve the padding _and_ the table border, move the table into another container like a `ui.row` (third card).\n\nSee https://github.com/zauberzeug/nicegui/issues/726 for more information.\n",
    "url": "/documentation/card#the_issue_with_nested_borders"
  },
  {
    "title": "ui.column: Column Element",
    "content": "Provides a container which arranges its child in a column.\n\n:param wrap: whether to wrap the content (default: `False`)\n",
    "url": "/documentation/column#column_element"
  },
  {
    "title": "ui.column: Masonry or Pinterest-Style Layout",
    "content": "To create a masonry/Pinterest layout, the normal `ui.column` can not be used.\nBut it can be achieved with a few TailwindCSS classes.\n",
    "url": "/documentation/column#masonry_or_pinterest-style_layout"
  },
  {
    "title": "ui.row: Row Element",
    "content": "Provides a container which arranges its child in a row.\n\n:param wrap: whether to wrap the content (default: `True`)\n",
    "url": "/documentation/row#row_element"
  },
  {
    "title": "ui.grid: Grid Element",
    "content": "Provides a container which arranges its child in a grid.\n\n:param rows: number of rows in the grid\n:param columns: number of columns in the grid\n",
    "url": "/documentation/grid#grid_element"
  },
  {
    "title": "ui.expansion: Expansion Element",
    "content": "Provides an expandable container based on Quasar's `QExpansionItem <https://quasar.dev/vue-components/expansion-item>`_ component.\n\n:param text: title text\n:param icon: optional icon (default: None)\n:param value: whether the expansion should be opened on creation (default: `False`)\n:param on_value_change: callback to execute when value changes\n",
    "url": "/documentation/expansion#expansion_element"
  },
  {
    "title": "ui.expansion: Expansion with Custom Header",
    "content": "Instead of setting a plain-text title, you can fill the expansion header with UI elements by adding them to the \"header\" slot.\n",
    "url": "/documentation/expansion#expansion_with_custom_header"
  },
  {
    "title": "ui.scrollarea: Scroll Area",
    "content": "A way of customizing the scrollbars by encapsulating your content.\nThis element exposes the Quasar `ScrollArea <https://quasar.dev/vue-components/scroll-area/>`_ component.\n\n:param on_scroll: function to be called when the scroll position changes\n",
    "url": "/documentation/scrollarea#scroll_area"
  },
  {
    "title": "ui.scrollarea: Handling Scroll Events",
    "content": "You can use the `on_scroll` argument in `ui.scroll_area` to handle scroll events.\nThe callback receives a `ScrollEventArguments` object with the following attributes:\n\n- `sender`: the scroll area that generated the event\n- `client`: the matching client\n- additional arguments as described in [Quasar's documentation for the ScrollArea API](https://quasar.dev/vue-components/scroll-area/#qscrollarea-api)\n",
    "url": "/documentation/scrollarea#handling_scroll_events"
  },
  {
    "title": "ui.scrollarea: Setting the scroll position",
    "content": "You can use `scroll_to` to programmatically set the scroll position.\nThis can be useful for navigation or synchronization of multiple scroll areas.\n",
    "url": "/documentation/scrollarea#setting_the_scroll_position"
  },
  {
    "title": "ui.separator: Separator",
    "content": "This element is based on Quasar's `QSeparator <https://quasar.dev/vue-components/separator>`_ component.\n\nIt serves as a separator for cards, menus and other component containers and is similar to HTML's <hr> tag.\n",
    "url": "/documentation/separator#separator"
  },
  {
    "title": "ui.splitter: Splitter",
    "content": "The `ui.splitter` element divides the screen space into resizable sections, \nallowing for flexible and responsive layouts in your application.\n\nBased on Quasar's Splitter component:\n`Splitter <https://quasar.dev/vue-components/splitter>`_\n\nIt provides three customizable slots, ``before``, ``after``, and ``separator``,\nwhich can be used to embed other elements within the splitter.\n\n:param horizontal: Whether to split horizontally instead of vertically\n:param limits: Two numbers representing the minimum and maximum split size of the two panels\n:param value: Size of the first panel (or second if using reverse)\n:param reverse: Whether to apply the model size to the second panel instead of the first\n:param on_change: callback which is invoked when the user releases the splitter\n",
    "url": "/documentation/splitter#splitter"
  },
  {
    "title": "ui.splitter: Advanced usage",
    "content": "This demo shows all the slots and parameters including a tooltip, a custom separator, and a callback.\n",
    "url": "/documentation/splitter#advanced_usage"
  },
  {
    "title": "ui.splitter: Image fun",
    "content": "This demo shows how to use the splitter to display images side by side.\n",
    "url": "/documentation/splitter#image_fun"
  },
  {
    "title": "ui.tabs: Tabs",
    "content": "This element represents `Quasar's QTabs <https://quasar.dev/vue-components/tabs#qtabs-api>`_ component.\nIt contains individual tabs.\n\n:param value: `ui.tab`, `ui.tab_panel`, or name of the tab to be initially selected\n:param on_change: callback to be executed when the selected tab changes\n",
    "url": "/documentation/tabs#tabs"
  },
  {
    "title": "ui.tabs: Name, label, icon",
    "content": "The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\nThe `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \nAdditionally each tab can have an `icon`.\n",
    "url": "/documentation/tabs#name__label__icon"
  },
  {
    "title": "ui.tabs: Switch tabs programmatically",
    "content": "The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\nThat can be used to switch tabs programmatically.\n",
    "url": "/documentation/tabs#switch_tabs_programmatically"
  },
  {
    "title": "ui.stepper: Stepper",
    "content": "This element represents `Quasar's QStepper <https://quasar.dev/vue-components/stepper#qstepper-api>`_ component.\nIt contains individual steps.\n\nTo avoid issues with dynamic elements when switching steps,\nthis element uses Vue's `keep-alive <https://vuejs.org/guide/built-ins/keep-alive.html>`_ component.\nIf client-side performance is an issue, you can disable this feature.\n\n:param value: `ui.step` or name of the step to be initially selected (default: `None` meaning the first step)\n:param on_value_change: callback to be executed when the selected step changes\n:param keep_alive: whether to use Vue's keep-alive component on the content (default: `True`)\n",
    "url": "/documentation/stepper#stepper"
  },
  {
    "title": "ui.timeline: Timeline",
    "content": "This element represents `Quasar's QTimeline <https://quasar.dev/vue-components/timeline#qtimeline-api>`_ component.\n\n:param side: Side (\"left\" or \"right\"; default: \"left\").\n:param layout: Layout (\"dense\", \"comfortable\" or \"loose\"; default: \"dense\").\n:param color: Color of the icons.\n",
    "url": "/documentation/timeline#timeline"
  },
  {
    "title": "ui.carousel: Carousel",
    "content": "This element represents `Quasar's QCarousel <https://quasar.dev/vue-components/carousel#qcarousel-api>`_ component.\nIt contains individual carousel slides.\n\n:param value: `ui.carousel_slide` or name of the slide to be initially selected (default: `None` meaning the first slide)\n:param on_value_change: callback to be executed when the selected slide changes\n:param animated: whether to animate slide transitions (default: `False`)\n:param arrows: whether to show arrows for manual slide navigation (default: `False`)\n:param navigation: whether to show navigation dots for manual slide navigation (default: `False`)\n",
    "url": "/documentation/carousel#carousel"
  },
  {
    "title": "ui.pagination: Pagination",
    "content": "A pagination element wrapping Quasar's `QPagination <https://quasar.dev/vue-components/pagination>`_ component.\n\n:param min: minimum page number\n:param max: maximum page number\n:param direction_links: whether to show first/last page links\n:param value: initial page (defaults to `min` if no value is provided)\n:param on_change: callback to be invoked when the value changes\n",
    "url": "/documentation/pagination#pagination"
  },
  {
    "title": "ui.menu: Menu",
    "content": "Creates a menu based on Quasar's `QMenu <https://quasar.dev/vue-components/menu>`_ component.\nThe menu should be placed inside the element where it should be shown.\n\n:param value: whether the menu is already opened (default: `False`)\n",
    "url": "/documentation/menu#menu"
  },
  {
    "title": "ui.contextmenu: Context Menu",
    "content": "Creates a context menu based on Quasar's `QMenu <https://quasar.dev/vue-components/menu>`_ component.\nThe context menu should be placed inside the element where it should be shown.\nIt is automatically opened when the user right-clicks on the element and appears at the mouse position.\n",
    "url": "/documentation/contextmenu#context_menu"
  },
  {
    "title": "ui.notify: Notification",
    "content": "Displays a notification on the screen.\n\n:param message: content of the notification\n:param position: position on the screen (\"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\", \"top\", \"bottom\", \"left\", \"right\" or \"center\", default: \"bottom\")\n:param close_button: optional label of a button to dismiss the notification (default: `False`)\n:param type: optional type (\"positive\", \"negative\", \"warning\", \"info\" or \"ongoing\")\n:param color: optional color name\n:param multi_line: enable multi-line notifications\n\nNote: You can pass additional keyword arguments according to `Quasar's Notify API <https://quasar.dev/quasar-plugins/notify#notify-api>`_.\n",
    "url": "/documentation/notify#notification"
  },
  {
    "title": "ui.notify: Notification Types",
    "content": "There are different types that can be used to indicate the nature of the notification.\n",
    "url": "/documentation/notify#notification_types"
  },
  {
    "title": "ui.notify: Multiline Notifications",
    "content": "To allow a notification text to span multiple lines, it is sufficient to set `multi_line=True`.\nIf manual newline breaks are required (e.g. `\\n`), you need to define a CSS style and pass it to the notification as shown in the example.\n",
    "url": "/documentation/notify#multiline_notifications"
  },
  {
    "title": "ui.dialog: Dialog",
    "content": "Creates a dialog based on Quasar's `QDialog <https://quasar.dev/vue-components/dialog>`_ component.\nBy default it is dismissible by clicking or pressing ESC.\nTo make it persistent, set `.props('persistent')` on the dialog element.\n\n:param value: whether the dialog should be opened on creation (default: `False`)\n",
    "url": "/documentation/dialog#dialog"
  },
  {
    "title": "ui.dialog: Awaitable dialog",
    "content": "Dialogs can be awaited.\nUse the `submit` method to close the dialog and return a result.\nCanceling the dialog by clicking in the background or pressing the escape key yields `None`.\n",
    "url": "/documentation/dialog#awaitable_dialog"
  },
  {
    "title": "ui.dialog: Replacing content",
    "content": "The content of a dialog can be changed.\n",
    "url": "/documentation/dialog#replacing_content"
  },
  {
    "title": "Page Layout: Auto-context",
    "content": "In order to allow writing intuitive UI descriptions, NiceGUI automatically tracks the context in which elements are created.\nThis means that there is no explicit `parent` parameter.\nInstead the parent context is defined using a `with` statement.\nIt is also passed to event handlers and timers.\n\nIn the demo, the label \"Card content\" is added to the card.\nAnd because the `ui.button` is also added to the card, the label \"Click!\" will also be created in this context.\nThe label \"Tick!\", which is added once after one second, is also added to the card.\n\nThis design decision allows for easily creating modular components that keep working after moving them around in the UI.\nFor example, you can move label and button somewhere else, maybe wrap them in another container, and the code will still work.\n",
    "url": "/documentation/section_page_layout#auto-context"
  },
  {
    "title": "Page Layout: Card",
    "content": "This element is based on Quasar's `QCard <https://quasar.dev/vue-components/card>`_ component.\nIt provides a container with a dropped shadow.\n\nNote:\nThere are subtle differences between the Quasar component and this element.\nIn contrast to this element, the original QCard has no padding by default and hides outer borders of nested elements.\nIf you want the original behavior, use the `tight` method.\nIf you want the padding and borders for nested children, move the children into another container.\n",
    "url": "/documentation/section_page_layout#card"
  },
  {
    "title": "Page Layout: Column Element",
    "content": "Provides a container which arranges its child in a column.\n\n:param wrap: whether to wrap the content (default: `False`)\n",
    "url": "/documentation/section_page_layout#column_element"
  },
  {
    "title": "Page Layout: Row Element",
    "content": "Provides a container which arranges its child in a row.\n\n:param wrap: whether to wrap the content (default: `True`)\n",
    "url": "/documentation/section_page_layout#row_element"
  },
  {
    "title": "Page Layout: Grid Element",
    "content": "Provides a container which arranges its child in a grid.\n\n:param rows: number of rows in the grid\n:param columns: number of columns in the grid\n",
    "url": "/documentation/section_page_layout#grid_element"
  },
  {
    "title": "Page Layout: Clear Containers",
    "content": "To remove all elements from a row, column or card container, use can call\n```py\ncontainer.clear()\n```\n\nAlternatively, you can remove individual elements by calling\n\n- `container.remove(element: Element)`,\n- `container.remove(index: int)`, or\n- `element.delete()`.\n",
    "url": "/documentation/section_page_layout#clear_containers"
  },
  {
    "title": "Page Layout: Expansion Element",
    "content": "Provides an expandable container based on Quasar's `QExpansionItem <https://quasar.dev/vue-components/expansion-item>`_ component.\n\n:param text: title text\n:param icon: optional icon (default: None)\n:param value: whether the expansion should be opened on creation (default: `False`)\n:param on_value_change: callback to execute when value changes\n",
    "url": "/documentation/section_page_layout#expansion_element"
  },
  {
    "title": "Page Layout: Scroll Area",
    "content": "A way of customizing the scrollbars by encapsulating your content.\nThis element exposes the Quasar `ScrollArea <https://quasar.dev/vue-components/scroll-area/>`_ component.\n\n:param on_scroll: function to be called when the scroll position changes\n",
    "url": "/documentation/section_page_layout#scroll_area"
  },
  {
    "title": "Page Layout: Separator",
    "content": "This element is based on Quasar's `QSeparator <https://quasar.dev/vue-components/separator>`_ component.\n\nIt serves as a separator for cards, menus and other component containers and is similar to HTML's <hr> tag.\n",
    "url": "/documentation/section_page_layout#separator"
  },
  {
    "title": "Page Layout: Splitter",
    "content": "The `ui.splitter` element divides the screen space into resizable sections, \nallowing for flexible and responsive layouts in your application.\n\nBased on Quasar's Splitter component:\n`Splitter <https://quasar.dev/vue-components/splitter>`_\n\nIt provides three customizable slots, ``before``, ``after``, and ``separator``,\nwhich can be used to embed other elements within the splitter.\n\n:param horizontal: Whether to split horizontally instead of vertically\n:param limits: Two numbers representing the minimum and maximum split size of the two panels\n:param value: Size of the first panel (or second if using reverse)\n:param reverse: Whether to apply the model size to the second panel instead of the first\n:param on_change: callback which is invoked when the user releases the splitter\n",
    "url": "/documentation/section_page_layout#splitter"
  },
  {
    "title": "Page Layout: Tabs",
    "content": "This element represents `Quasar's QTabs <https://quasar.dev/vue-components/tabs#qtabs-api>`_ component.\nIt contains individual tabs.\n\n:param value: `ui.tab`, `ui.tab_panel`, or name of the tab to be initially selected\n:param on_change: callback to be executed when the selected tab changes\n",
    "url": "/documentation/section_page_layout#tabs"
  },
  {
    "title": "Page Layout: Stepper",
    "content": "This element represents `Quasar's QStepper <https://quasar.dev/vue-components/stepper#qstepper-api>`_ component.\nIt contains individual steps.\n\nTo avoid issues with dynamic elements when switching steps,\nthis element uses Vue's `keep-alive <https://vuejs.org/guide/built-ins/keep-alive.html>`_ component.\nIf client-side performance is an issue, you can disable this feature.\n\n:param value: `ui.step` or name of the step to be initially selected (default: `None` meaning the first step)\n:param on_value_change: callback to be executed when the selected step changes\n:param keep_alive: whether to use Vue's keep-alive component on the content (default: `True`)\n",
    "url": "/documentation/section_page_layout#stepper"
  },
  {
    "title": "Page Layout: Timeline",
    "content": "This element represents `Quasar's QTimeline <https://quasar.dev/vue-components/timeline#qtimeline-api>`_ component.\n\n:param side: Side (\"left\" or \"right\"; default: \"left\").\n:param layout: Layout (\"dense\", \"comfortable\" or \"loose\"; default: \"dense\").\n:param color: Color of the icons.\n",
    "url": "/documentation/section_page_layout#timeline"
  },
  {
    "title": "Page Layout: Carousel",
    "content": "This element represents `Quasar's QCarousel <https://quasar.dev/vue-components/carousel#qcarousel-api>`_ component.\nIt contains individual carousel slides.\n\n:param value: `ui.carousel_slide` or name of the slide to be initially selected (default: `None` meaning the first slide)\n:param on_value_change: callback to be executed when the selected slide changes\n:param animated: whether to animate slide transitions (default: `False`)\n:param arrows: whether to show arrows for manual slide navigation (default: `False`)\n:param navigation: whether to show navigation dots for manual slide navigation (default: `False`)\n",
    "url": "/documentation/section_page_layout#carousel"
  },
  {
    "title": "Page Layout: Pagination",
    "content": "A pagination element wrapping Quasar's `QPagination <https://quasar.dev/vue-components/pagination>`_ component.\n\n:param min: minimum page number\n:param max: maximum page number\n:param direction_links: whether to show first/last page links\n:param value: initial page (defaults to `min` if no value is provided)\n:param on_change: callback to be invoked when the value changes\n",
    "url": "/documentation/section_page_layout#pagination"
  },
  {
    "title": "Page Layout: Menu",
    "content": "Creates a menu based on Quasar's `QMenu <https://quasar.dev/vue-components/menu>`_ component.\nThe menu should be placed inside the element where it should be shown.\n\n:param value: whether the menu is already opened (default: `False`)\n",
    "url": "/documentation/section_page_layout#menu"
  },
  {
    "title": "Page Layout: Context Menu",
    "content": "Creates a context menu based on Quasar's `QMenu <https://quasar.dev/vue-components/menu>`_ component.\nThe context menu should be placed inside the element where it should be shown.\nIt is automatically opened when the user right-clicks on the element and appears at the mouse position.\n",
    "url": "/documentation/section_page_layout#context_menu"
  },
  {
    "title": "Page Layout: Tooltips",
    "content": "Simply call the `tooltip(text:str)` method on UI elements to provide a tooltip.\n\nFor more artistic control you can nest tooltip elements and apply props, classes and styles.\n",
    "url": "/documentation/section_page_layout#tooltips"
  },
  {
    "title": "Page Layout: Notification",
    "content": "Displays a notification on the screen.\n\n:param message: content of the notification\n:param position: position on the screen (\"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\", \"top\", \"bottom\", \"left\", \"right\" or \"center\", default: \"bottom\")\n:param close_button: optional label of a button to dismiss the notification (default: `False`)\n:param type: optional type (\"positive\", \"negative\", \"warning\", \"info\" or \"ongoing\")\n:param color: optional color name\n:param multi_line: enable multi-line notifications\n\nNote: You can pass additional keyword arguments according to `Quasar's Notify API <https://quasar.dev/quasar-plugins/notify#notify-api>`_.\n",
    "url": "/documentation/section_page_layout#notification"
  },
  {
    "title": "Page Layout: Dialog",
    "content": "Creates a dialog based on Quasar's `QDialog <https://quasar.dev/vue-components/dialog>`_ component.\nBy default it is dismissible by clicking or pressing ESC.\nTo make it persistent, set `.props('persistent')` on the dialog element.\n\n:param value: whether the dialog should be opened on creation (default: `False`)\n",
    "url": "/documentation/section_page_layout#dialog"
  },
  {
    "title": "ui.query: Query Selector",
    "content": "To manipulate elements like the document body, you can use the `ui.query` function.\nWith the query result you can add classes, styles, and attributes like with every other UI element.\nThis can be useful for example to change the background color of the page (e.g. `ui.query('body').classes('bg-green')`).\n\n:param selector: the CSS selector (e.g. \"body\", \"#my-id\", \".my-class\", \"div > p\")\n",
    "url": "/documentation/query#query_selector"
  },
  {
    "title": "ui.query: Set background gradient",
    "content": "It's easy to set a background gradient, image or similar. \nSee [w3schools.com](https://www.w3schools.com/cssref/pr_background-image.php) for more information about setting background with CSS.\n",
    "url": "/documentation/query#set_background_gradient"
  },
  {
    "title": "ui.query: Modify default page padding",
    "content": "By default, NiceGUI provides a built-in padding around the content of the page.\nYou can modify it using the class selector `.nicegui-content`.\n",
    "url": "/documentation/query#modify_default_page_padding"
  },
  {
    "title": "ui.colors: Color Theming",
    "content": "Sets the main colors (primary, secondary, accent, ...) used by `Quasar <https://quasar.dev/>`_.\n",
    "url": "/documentation/colors#color_theming"
  },
  {
    "title": "ui.darkmode: Dark mode",
    "content": "You can use this element to enable, disable or toggle dark mode on the page.\nThe value `None` represents auto mode, which uses the client's system preference.\n\nNote that this element overrides the `dark` parameter of the `ui.run` function and page decorators.\n\n:param value: Whether dark mode is enabled. If None, dark mode is set to auto.\n:param on_change: Callback that is invoked when the value changes.\n",
    "url": "/documentation/darkmode#dark_mode"
  },
  {
    "title": "Styling & Appearance: Styling",
    "content": "NiceGUI uses the [Quasar Framework](https://quasar.dev/) version 1.0 and hence has its full design power.\nEach NiceGUI element provides a `props` method whose content is passed [to the Quasar component](https://justpy.io/quasar_tutorial/introduction/#props-of-quasar-components):\nHave a look at [the Quasar documentation](https://quasar.dev/vue-components/button#design) for all styling props.\nProps with a leading `:` can contain JavaScript expressions that are evaluated on the client.\nYou can also apply [Tailwind CSS](https://tailwindcss.com/) utility classes with the `classes` method.\n\nIf you really need to apply CSS, you can use the `style` method. Here the delimiter is `;` instead of a blank space.\n\nAll three functions also provide `remove` and `replace` parameters in case the predefined look is not wanted in a particular styling.\n",
    "url": "/documentation/section_styling_appearance#styling"
  },
  {
    "title": "Styling & Appearance: Try styling NiceGUI elements!",
    "content": "\n            Try out how\n            [Tailwind CSS classes](https://tailwindcss.com/),\n            [Quasar props](https://justpy.io/quasar_tutorial/introduction/#props-of-quasar-components),\n            and CSS styles affect NiceGUI elements.\n        ",
    "url": "/documentation/section_styling_appearance#try_styling_nicegui_elements_"
  },
  {
    "title": "Styling & Appearance: None",
    "content": null,
    "url": "/documentation/section_styling_appearance#None"
  },
  {
    "title": "Styling & Appearance: Tailwind CSS",
    "content": "[Tailwind CSS](https://tailwindcss.com/) is a CSS framework for rapidly building custom user interfaces.\nNiceGUI provides a fluent, auto-complete friendly interface for adding Tailwind classes to UI elements.\n\nYou can discover available classes by navigating the methods of the `tailwind` property.\nThe builder pattern allows you to chain multiple classes together (as shown with \"Label A\").\nYou can also call the `tailwind` property with a list of classes (as shown with \"Label B\").\n\nAlthough this is very similar to using the `classes` method, it is more convenient for Tailwind classes due to auto-completion.\n\nLast but not least, you can also predefine a style and apply it to multiple elements (labels C and D).\n    \nNote that sometimes Tailwind is overruled by Quasar styles, e.g. when using `ui.button('Button').tailwind('bg-red-500')`.\nThis is a known limitation and not fully in our control.\nBut we try to provide solutions like the `color` parameter: `ui.button('Button', color='red-500')`.\n",
    "url": "/documentation/section_styling_appearance#tailwind_css"
  },
  {
    "title": "Styling & Appearance: Query Selector",
    "content": "To manipulate elements like the document body, you can use the `ui.query` function.\nWith the query result you can add classes, styles, and attributes like with every other UI element.\nThis can be useful for example to change the background color of the page (e.g. `ui.query('body').classes('bg-green')`).\n\n:param selector: the CSS selector (e.g. \"body\", \"#my-id\", \".my-class\", \"div > p\")\n",
    "url": "/documentation/section_styling_appearance#query_selector"
  },
  {
    "title": "Styling & Appearance: Color Theming",
    "content": "Sets the main colors (primary, secondary, accent, ...) used by `Quasar <https://quasar.dev/>`_.\n",
    "url": "/documentation/section_styling_appearance#color_theming"
  },
  {
    "title": "Styling & Appearance: Dark mode",
    "content": "You can use this element to enable, disable or toggle dark mode on the page.\nThe value `None` represents auto mode, which uses the client's system preference.\n\nNote that this element overrides the `dark` parameter of the `ui.run` function and page decorators.\n\n:param value: Whether dark mode is enabled. If None, dark mode is set to auto.\n:param on_change: Callback that is invoked when the value changes.\n",
    "url": "/documentation/section_styling_appearance#dark_mode"
  },
  {
    "title": "ui.timer: Timer",
    "content": "One major drive behind the creation of NiceGUI was the necessity to have a simple approach to update the interface in regular intervals,\nfor example to show a graph with incoming measurements.\nA timer will execute a callback repeatedly with a given interval.\n\n:param interval: the interval in which the timer is called (can be changed during runtime)\n:param callback: function or coroutine to execute when interval elapses\n:param active: whether the callback should be executed or not (can be changed during runtime)\n:param once: whether the callback is only executed once after a delay specified by `interval` (default: `False`)\n",
    "url": "/documentation/timer#timer"
  },
  {
    "title": "ui.timer: Activate, deactivate and cancel a timer",
    "content": "You can activate and deactivate a timer using the `active` property.\nYou can cancel a timer using the `cancel` method.\nAfter canceling a timer, it cannot be activated anymore.\n",
    "url": "/documentation/timer#activate__deactivate_and_cancel_a_timer"
  },
  {
    "title": "ui.timer: Call a function after a delay",
    "content": "You can call a function after a delay using a timer with the `once` parameter.\n",
    "url": "/documentation/timer#call_a_function_after_a_delay"
  },
  {
    "title": "ui.keyboard: Keyboard",
    "content": "Adds global keyboard event tracking.\n\n:param on_key: callback to be executed when keyboard events occur.\n:param active: boolean flag indicating whether the callback should be executed or not (default: `True`)\n:param repeating: boolean flag indicating whether held keys should be sent repeatedly (default: `True`)\n:param ignore: ignore keys when one of these element types is focussed (default: `['input', 'select', 'button', 'textarea']`)\n",
    "url": "/documentation/keyboard#keyboard"
  },
  {
    "title": "ui.refreshable: Refreshable UI functions",
    "content": "The `@ui.refreshable` decorator allows you to create functions that have a `refresh` method.\nThis method will automatically delete all elements created by the function and recreate them.\n",
    "url": "/documentation/refreshable#refreshable_ui_functions"
  },
  {
    "title": "ui.refreshable: Refreshable UI with parameters",
    "content": "Here is a demo of how to use the refreshable decorator to create a UI that can be refreshed with different parameters.\n",
    "url": "/documentation/refreshable#refreshable_ui_with_parameters"
  },
  {
    "title": "ui.refreshable: Refreshable UI for input validation",
    "content": "Here is a demo of how to use the refreshable decorator to give feedback about the validity of user input.\n",
    "url": "/documentation/refreshable#refreshable_ui_for_input_validation"
  },
  {
    "title": "ui.refreshable: Refreshable UI with reactive state",
    "content": "You can create reactive state variables with the `ui.state` function, like `count` and `color` in this demo.\nThey can be used like normal variables for creating UI elements like the `ui.label`.\nTheir corresponding setter functions can be used to set new values, which will automatically refresh the UI.\n",
    "url": "/documentation/refreshable#refreshable_ui_with_reactive_state"
  },
  {
    "title": "Generic Events: Generic Events",
    "content": "Most UI elements come with predefined events.\nFor example, a `ui.button` like \"A\" in the demo has an `on_click` parameter that expects a coroutine or function.\nBut you can also use the `on` method to register a generic event handler like for \"B\".\nThis allows you to register handlers for any event that is supported by JavaScript and Quasar.\n\nFor example, you can register a handler for the `mousemove` event like for \"C\", even though there is no `on_mousemove` parameter for `ui.button`.\nSome events, like `mousemove`, are fired very often.\nTo avoid performance issues, you can use the `throttle` parameter to only call the handler every `throttle` seconds (\"D\").\n\nThe generic event handler can be synchronous or asynchronous and optionally takes `GenericEventArguments` as argument (\"E\").\nYou can also specify which attributes of the JavaScript or Quasar event should be passed to the handler (\"F\").\nThis can reduce the amount of data that needs to be transferred between the server and the client.\n\nHere you can find more information about the events that are supported:\n\n- https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement#events for HTML elements\n- https://quasar.dev/vue-components for Quasar-based elements (see the \"Events\" tab on the individual component page)\n",
    "url": "/documentation/generic_events#generic_events"
  },
  {
    "title": "Generic Events: Specifying event attributes",
    "content": "**A list of strings** names the attributes of the JavaScript event object:\n    ```py\n    ui.button().on('click', handle_click, ['clientX', 'clientY'])\n    ```\n\n**An empty list** requests _no_ attributes:\n    ```py\n    ui.button().on('click', handle_click, [])\n    ```\n\n**The value `None`** represents _all_ attributes (the default):\n    ```py\n    ui.button().on('click', handle_click, None)\n    ```\n\n**If the event is called with multiple arguments** like QTable's \"row-click\" `(evt, row, index) => void`,\n    you can define a list of argument definitions:\n    ```py\n    ui.table(...).on('rowClick', handle_click, [[], ['name'], None])\n    ```\n    In this example the \"row-click\" event will omit all arguments of the first `evt` argument,\n    send only the \"name\" attribute of the `row` argument and send the full `index`.\n\nIf the retrieved list of event arguments has length 1, the argument is automatically unpacked.\nSo you can write\n```py\nui.button().on('click', lambda e: print(e.args['clientX'], flush=True))\n```\ninstead of\n```py\nui.button().on('click', lambda e: print(e.args[0]['clientX'], flush=True))\n```\n\nNote that by default all JSON-serializable attributes of all arguments are sent.\nThis is to simplify registering for new events and discovering their attributes.\nIf bandwidth is an issue, the arguments should be limited to what is actually needed on the server.\n",
    "url": "/documentation/generic_events#specifying_event_attributes"
  },
  {
    "title": "Generic Events: Modifiers",
    "content": "You can also include [key modifiers](https://vuejs.org/guide/essentials/event-handling.html#key-modifiers>) (shown in input \"A\"),\nmodifier combinations (shown in input \"B\"),\nand [event modifiers](https://vuejs.org/guide/essentials/event-handling.html#mouse-button-modifiers>) (shown in input \"C\").\n",
    "url": "/documentation/generic_events#modifiers"
  },
  {
    "title": "Generic Events: Custom events",
    "content": "It is fairly easy to emit custom events from JavaScript which can be listened to with `element.on(...)`.\nThis can be useful if you want to call Python code when something happens in JavaScript.\nIn this example we are listening to the `visibilitychange` event of the browser tab.\n",
    "url": "/documentation/generic_events#custom_events"
  },
  {
    "title": "ui.run_javascript: Run JavaScript",
    "content": "This function runs arbitrary JavaScript code on a page that is executed in the browser.\nThe client must be connected before this function is called.\nTo access a client-side object by ID, use the JavaScript function `getElement()`.\n\nIf the function is awaited, the result of the JavaScript code is returned.\nOtherwise, the JavaScript code is executed without waiting for a response.\n\n:param code: JavaScript code to run\n:param timeout: timeout in seconds (default: `1.0`)\n:param check_interval: interval in seconds to check for a response (default: `0.01`)\n\n:return: AwaitableResponse that can be awaited to get the result of the JavaScript code\n",
    "url": "/documentation/run_javascript#run_javascript"
  },
  {
    "title": "ui.run_javascript: Run async JavaScript",
    "content": "Using `run_javascript` you can also run asynchronous code in the browser.\nThe following demo shows how to get the current location of the user.\n",
    "url": "/documentation/run_javascript#run_async_javascript"
  },
  {
    "title": "Storage: Storage",
    "content": "NiceGUI offers a straightforward method for data persistence within your application. \nIt features three built-in storage types:\n\n- `app.storage.user`:\n    Stored server-side, each dictionary is associated with a unique identifier held in a browser session cookie.\n    Unique to each user, this storage is accessible across all their browser tabs.\n    `app.storage.browser['id']` is used to identify the user.\n- `app.storage.general`:\n    Also stored server-side, this dictionary provides a shared storage space accessible to all users.\n- `app.storage.browser`:\n    Unlike the previous types, this dictionary is stored directly as the browser session cookie, shared among all browser tabs for the same user.\n    However, `app.storage.user` is generally preferred due to its advantages in reducing data payload, enhancing security, and offering larger storage capacity.\n    By default, NiceGUI holds a unique identifier for the browser session in `app.storage.browser['id']`.\n\nThe user storage and browser storage are only available within `page builder functions </documentation/page>`_\nbecause they are accessing the underlying `Request` object from FastAPI.\nAdditionally these two types require the `storage_secret` parameter in`ui.run()` to encrypt the browser session cookie.\n",
    "url": "/documentation/storage#storage"
  },
  {
    "title": "Storage: Counting page visits",
    "content": "Here we are using the automatically available browser-stored session ID to count the number of unique page visits.\n",
    "url": "/documentation/storage#counting_page_visits"
  },
  {
    "title": "Storage: Storing UI state",
    "content": "Storage can also be used in combination with [`bindings`](/documentation/bindings).\nHere we are storing the value of a textarea between visits.\nThe note is also shared between all tabs of the same user.\n",
    "url": "/documentation/storage#storing_ui_state"
  },
  {
    "title": "Action & Events: Timer",
    "content": "One major drive behind the creation of NiceGUI was the necessity to have a simple approach to update the interface in regular intervals,\nfor example to show a graph with incoming measurements.\nA timer will execute a callback repeatedly with a given interval.\n\n:param interval: the interval in which the timer is called (can be changed during runtime)\n:param callback: function or coroutine to execute when interval elapses\n:param active: whether the callback should be executed or not (can be changed during runtime)\n:param once: whether the callback is only executed once after a delay specified by `interval` (default: `False`)\n",
    "url": "/documentation/section_action_events#timer"
  },
  {
    "title": "Action & Events: Keyboard",
    "content": "Adds global keyboard event tracking.\n\n:param on_key: callback to be executed when keyboard events occur.\n:param active: boolean flag indicating whether the callback should be executed or not (default: `True`)\n:param repeating: boolean flag indicating whether held keys should be sent repeatedly (default: `True`)\n:param ignore: ignore keys when one of these element types is focussed (default: `['input', 'select', 'button', 'textarea']`)\n",
    "url": "/documentation/section_action_events#keyboard"
  },
  {
    "title": "Action & Events: UI Updates",
    "content": "NiceGUI tries to automatically synchronize the state of UI elements with the client,\ne.g. when a label text, an input value or style/classes/props of an element have changed.\nIn other cases, you can explicitly call `element.update()` or `ui.update(*elements)` to update.\nThe demo code shows both methods for a `ui.echart`, where it is difficult to automatically detect changes in the `options` dictionary.\n",
    "url": "/documentation/section_action_events#ui_updates"
  },
  {
    "title": "Action & Events: Refreshable UI functions",
    "content": "The `@ui.refreshable` decorator allows you to create functions that have a `refresh` method.\nThis method will automatically delete all elements created by the function and recreate them.\n",
    "url": "/documentation/section_action_events#refreshable_ui_functions"
  },
  {
    "title": "Action & Events: Async event handlers",
    "content": "Most elements also support asynchronous event handlers.\n\nNote: You can also pass a `functools.partial` into the `on_click` property to wrap async functions with parameters.\n",
    "url": "/documentation/section_action_events#async_event_handlers"
  },
  {
    "title": "Action & Events: Generic Events",
    "content": "Most UI elements come with predefined events.\nFor example, a `ui.button` like \"A\" in the demo has an `on_click` parameter that expects a coroutine or function.\nBut you can also use the `on` method to register a generic event handler like for \"B\".\nThis allows you to register handlers for any event that is supported by JavaScript and Quasar.\n\nFor example, you can register a handler for the `mousemove` event like for \"C\", even though there is no `on_mousemove` parameter for `ui.button`.\nSome events, like `mousemove`, are fired very often.\nTo avoid performance issues, you can use the `throttle` parameter to only call the handler every `throttle` seconds (\"D\").\n\nThe generic event handler can be synchronous or asynchronous and optionally takes `GenericEventArguments` as argument (\"E\").\nYou can also specify which attributes of the JavaScript or Quasar event should be passed to the handler (\"F\").\nThis can reduce the amount of data that needs to be transferred between the server and the client.\n\nHere you can find more information about the events that are supported:\n\n- https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement#events for HTML elements\n- https://quasar.dev/vue-components for Quasar-based elements (see the \"Events\" tab on the individual component page)\n",
    "url": "/documentation/section_action_events#generic_events"
  },
  {
    "title": "Action & Events: Running CPU-bound tasks",
    "content": "NiceGUI provides a `cpu_bound` function for running CPU-bound tasks in a separate process.\nThis is useful for long-running computations that would otherwise block the event loop and make the UI unresponsive.\nThe function returns a future that can be awaited.\n",
    "url": "/documentation/section_action_events#running_cpu-bound_tasks"
  },
  {
    "title": "Action & Events: Running I/O-bound tasks",
    "content": "NiceGUI provides an `io_bound` function for running I/O-bound tasks in a separate thread.\nThis is useful for long-running I/O operations that would otherwise block the event loop and make the UI unresponsive.\nThe function returns a future that can be awaited.\n",
    "url": "/documentation/section_action_events#running_i_o-bound_tasks"
  },
  {
    "title": "Action & Events: Run JavaScript",
    "content": "This function runs arbitrary JavaScript code on a page that is executed in the browser.\nThe client must be connected before this function is called.\nTo access a client-side object by ID, use the JavaScript function `getElement()`.\n\nIf the function is awaited, the result of the JavaScript code is returned.\nOtherwise, the JavaScript code is executed without waiting for a response.\n\n:param code: JavaScript code to run\n:param timeout: timeout in seconds (default: `1.0`)\n:param check_interval: interval in seconds to check for a response (default: `0.01`)\n\n:return: AwaitableResponse that can be awaited to get the result of the JavaScript code\n",
    "url": "/documentation/section_action_events#run_javascript"
  },
  {
    "title": "Action & Events: Events",
    "content": "You can register coroutines or functions to be called for the following events:\n\n- `app.on_startup`: called when NiceGUI is started or restarted\n- `app.on_shutdown`: called when NiceGUI is shut down or restarted\n- `app.on_connect`: called for each client which connects (optional argument: nicegui.Client)\n- `app.on_disconnect`: called for each client which disconnects (optional argument: nicegui.Client)\n- `app.on_exception`: called when an exception occurs (optional argument: exception)\n\nWhen NiceGUI is shut down or restarted, all tasks still in execution will be automatically canceled.\n",
    "url": "/documentation/section_action_events#events"
  },
  {
    "title": "Action & Events: Shut down NiceGUI.",
    "content": "This will programmatically stop the server.\nOnly possible when auto-reload is disabled.\n",
    "url": "/documentation/section_action_events#shut_down_nicegui_"
  },
  {
    "title": "Action & Events: Storage",
    "content": "NiceGUI offers a straightforward method for data persistence within your application. \nIt features three built-in storage types:\n\n- `app.storage.user`:\n    Stored server-side, each dictionary is associated with a unique identifier held in a browser session cookie.\n    Unique to each user, this storage is accessible across all their browser tabs.\n    `app.storage.browser['id']` is used to identify the user.\n- `app.storage.general`:\n    Also stored server-side, this dictionary provides a shared storage space accessible to all users.\n- `app.storage.browser`:\n    Unlike the previous types, this dictionary is stored directly as the browser session cookie, shared among all browser tabs for the same user.\n    However, `app.storage.user` is generally preferred due to its advantages in reducing data payload, enhancing security, and offering larger storage capacity.\n    By default, NiceGUI holds a unique identifier for the browser session in `app.storage.browser['id']`.\n\nThe user storage and browser storage are only available within `page builder functions </documentation/page>`_\nbecause they are accessing the underlying `Request` object from FastAPI.\nAdditionally these two types require the `storage_secret` parameter in`ui.run()` to encrypt the browser session cookie.\n",
    "url": "/documentation/section_action_events#storage"
  },
  {
    "title": "ui.page: Page",
    "content": "This decorator marks a function to be a page builder.\nEach user accessing the given route will see a new instance of the page.\nThis means it is private to the user and not shared with others \n(as it is done `when placing elements outside of a page decorator <https://nicegui.io/documentation#auto-index_page>`_).\n\n:param path: route of the new page (path must start with '/')\n:param title: optional page title\n:param viewport: optional viewport meta tag content\n:param favicon: optional relative filepath or absolute URL to a favicon (default: `None`, NiceGUI icon will be used)\n:param dark: whether to use Quasar's dark mode (defaults to `dark` argument of `run` command)\n:param language: language of the page (defaults to `language` argument of `run` command)\n:param response_timeout: maximum time for the decorated function to build the page (default: 3.0 seconds)\n:param reconnect_timeout: maximum time the server waits for the browser to reconnect (default: 0.0 seconds)\n:param api_router: APIRouter instance to use, can be left `None` to use the default\n:param kwargs: additional keyword arguments passed to FastAPI's @app.get method\n",
    "url": "/documentation/page#page"
  },
  {
    "title": "ui.page: Pages with Path Parameters",
    "content": "Page routes can contain parameters like [FastAPI](https://fastapi.tiangolo.com/tutorial/path-params/>).\nIf type-annotated, they are automatically converted to bool, int, float and complex values.\nIf the page function expects a `request` argument, the request object is automatically provided.\nThe `client` argument provides access to the websocket connection, layout, etc.\n",
    "url": "/documentation/page#pages_with_path_parameters"
  },
  {
    "title": "ui.page: Wait for Client Connection",
    "content": "To wait for a client connection, you can add a `client` argument to the decorated page function\nand await `client.connected()`.\nAll code below that statement is executed after the websocket connection between server and client has been established.\n\nFor example, this allows you to run JavaScript commands; which is only possible with a client connection (see [#112](https://github.com/zauberzeug/nicegui/issues/112)).\nAlso it is possible to do async stuff while the user already sees some content.\n",
    "url": "/documentation/page#wait_for_client_connection"
  },
  {
    "title": "ui.page: Modularize with APIRouter",
    "content": "You can use the NiceGUI specialization of\n[FastAPI's APIRouter](https://fastapi.tiangolo.com/tutorial/bigger-applications/?h=apirouter#apirouter)\nto modularize your code by grouping pages and other routes together.\nThis is especially useful if you want to reuse the same prefix for multiple pages.\nThe router and its pages can be neatly tugged away in a separate module (e.g. file) and\nthe router is simply imported and included in the main app.\nSee our [modularization example](https://github.com/zauberzeug/nicegui/blob/main/examples/modularization/example_c.py)\nfor a multi-file app structure.\n",
    "url": "/documentation/page#modularize_with_apirouter"
  },
  {
    "title": "ui.open: Open",
    "content": "Can be used to programmatically trigger redirects for a specific client.\n\nWhen using the `new_tab` parameter, the browser might block the new tab.\nThis is a browser setting and cannot be changed by the application.\nYou might want to use `ui.link` and its `new_tab` parameter instead.\n\nNote: When using an `auto-index page </documentation#auto-index_page>`_ (e.g. no `@page` decorator), \nall clients (i.e. browsers) connected to the page will open the target URL unless a socket is specified.\nUser events like button clicks provide such a socket.\n\n:param target: page function or string that is a an absolute URL or relative path from base URL\n:param new_tab: whether to open the target in a new tab (might be blocked by the browser)\n",
    "url": "/documentation/open#open"
  },
  {
    "title": "ui.download: Download",
    "content": "Function to trigger the download of a file, URL or bytes.\n\n:param src: target URL, local path of a file or raw data which should be downloaded\n:param filename: name of the file to download (default: name of the file on the server)\n",
    "url": "/documentation/download#download"
  },
  {
    "title": "ui.download: Download raw bytes from memory",
    "content": "The `download` function can also be used to download raw bytes from memory.\n",
    "url": "/documentation/download#download_raw_bytes_from_memory"
  },
  {
    "title": "Pages & Routing: Page",
    "content": "This decorator marks a function to be a page builder.\nEach user accessing the given route will see a new instance of the page.\nThis means it is private to the user and not shared with others \n(as it is done `when placing elements outside of a page decorator <https://nicegui.io/documentation#auto-index_page>`_).\n\n:param path: route of the new page (path must start with '/')\n:param title: optional page title\n:param viewport: optional viewport meta tag content\n:param favicon: optional relative filepath or absolute URL to a favicon (default: `None`, NiceGUI icon will be used)\n:param dark: whether to use Quasar's dark mode (defaults to `dark` argument of `run` command)\n:param language: language of the page (defaults to `language` argument of `run` command)\n:param response_timeout: maximum time for the decorated function to build the page (default: 3.0 seconds)\n:param reconnect_timeout: maximum time the server waits for the browser to reconnect (default: 0.0 seconds)\n:param api_router: APIRouter instance to use, can be left `None` to use the default\n:param kwargs: additional keyword arguments passed to FastAPI's @app.get method\n",
    "url": "/documentation/section_pages_routing#page"
  },
  {
    "title": "Pages & Routing: Auto-index page",
    "content": "Pages created with the `@ui.page` decorator are \"private\".\nTheir content is re-created for each client.\nThus, in the demo to the right, the displayed ID on the private page changes when the browser reloads the page.\n\nUI elements that are not wrapped in a decorated page function are placed on an automatically generated index page at route \"/\".\nThis auto-index page is created once on startup and *shared* across all clients that might connect.\nThus, each connected client will see the *same* elements.\nIn the demo to the right, the displayed ID on the auto-index page remains constant when the browser reloads the page.\n",
    "url": "/documentation/section_pages_routing#auto-index_page"
  },
  {
    "title": "Pages & Routing: Page Layout",
    "content": "With `ui.header`, `ui.footer`, `ui.left_drawer` and `ui.right_drawer` you can add additional layout elements to a page.\nThe `fixed` argument controls whether the element should scroll or stay fixed on the screen.\nThe `top_corner` and `bottom_corner` arguments indicate whether a drawer should expand to the top or bottom of the page.\nSee <https://quasar.dev/layout/header-and-footer> and <https://quasar.dev/layout/drawer> for more information about possible props.\nWith `ui.page_sticky` you can place an element \"sticky\" on the screen.\nSee <https://quasar.dev/layout/page-sticky> for more information.\n",
    "url": "/documentation/section_pages_routing#page_layout"
  },
  {
    "title": "Pages & Routing: Parameter injection",
    "content": "Thanks to FastAPI, a page function accepts optional parameters to provide\n[path parameters](https://fastapi.tiangolo.com/tutorial/path-params/), \n[query parameters](https://fastapi.tiangolo.com/tutorial/query-params/) or the whole incoming\n[request](https://fastapi.tiangolo.com/advanced/using-request-directly/) for accessing\nthe body payload, headers, cookies and more.\n",
    "url": "/documentation/section_pages_routing#parameter_injection"
  },
  {
    "title": "Pages & Routing: Open",
    "content": "Can be used to programmatically trigger redirects for a specific client.\n\nWhen using the `new_tab` parameter, the browser might block the new tab.\nThis is a browser setting and cannot be changed by the application.\nYou might want to use `ui.link` and its `new_tab` parameter instead.\n\nNote: When using an `auto-index page </documentation#auto-index_page>`_ (e.g. no `@page` decorator), \nall clients (i.e. browsers) connected to the page will open the target URL unless a socket is specified.\nUser events like button clicks provide such a socket.\n\n:param target: page function or string that is a an absolute URL or relative path from base URL\n:param new_tab: whether to open the target in a new tab (might be blocked by the browser)\n",
    "url": "/documentation/section_pages_routing#open"
  },
  {
    "title": "Pages & Routing: Download",
    "content": "Function to trigger the download of a file, URL or bytes.\n\n:param src: target URL, local path of a file or raw data which should be downloaded\n:param filename: name of the file to download (default: name of the file on the server)\n",
    "url": "/documentation/section_pages_routing#download"
  },
  {
    "title": "Pages & Routing: Add a directory of static files.",
    "content": "`add_static_files()` makes a local directory available at the specified endpoint, e.g. `'/static'`.\nThis is useful for providing local data like images to the frontend.\nOtherwise the browser would not be able to access the files.\nDo only put non-security-critical files in there, as they are accessible to everyone.\n\nTo make a single file accessible, you can use `add_static_file()`.\nFor media files which should be streamed, you can use `add_media_files()` or `add_media_file()` instead.\n\n:param url_path: string that starts with a slash \"/\" and identifies the path at which the files should be served\n:param local_directory: local folder with files to serve as static content\n",
    "url": "/documentation/section_pages_routing#add_a_directory_of_static_files_"
  },
  {
    "title": "Pages & Routing: Add directory of media files.",
    "content": "`add_media_files()` allows a local files to be streamed from a specified endpoint, e.g. `'/media'`.\nThis should be used for media files to support proper streaming.\nOtherwise the browser would not be able to access and load the the files incrementally or jump to different positions in the stream.\nDo only put non-security-critical files in there, as they are accessible to everyone.\n\nTo make a single file accessible via streaming, you can use `add_media_file()`.\nFor small static files, you can use `add_static_files()` or `add_static_file()` instead.\n\n:param url_path: string that starts with a slash \"/\" and identifies the path at which the files should be served\n:param local_directory: local folder with files to serve as media content\n",
    "url": "/documentation/section_pages_routing#add_directory_of_media_files_"
  },
  {
    "title": "Pages & Routing: API Responses",
    "content": "NiceGUI is based on [FastAPI](https://fastapi.tiangolo.com/).\nThis means you can use all of FastAPI's features.\nFor example, you can implement a RESTful API in addition to your graphical user interface.\nYou simply import the `app` object from `nicegui`.\nOr you can run NiceGUI on top of your own FastAPI app by using `ui.run_with(app)` instead of starting a server automatically with `ui.run()`.\n\nYou can also return any other FastAPI response object inside a page function.\nFor example, you can return a `RedirectResponse` to redirect the user to another page if certain conditions are met.\nThis is used in our [authentication demo](https://github.com/zauberzeug/nicegui/tree/main/examples/authentication/main.py).\n",
    "url": "/documentation/section_pages_routing#api_responses"
  },
  {
    "title": "ui.run: ui.run",
    "content": "You can call `ui.run()` with optional arguments.\nMost of them only apply after stopping and fully restarting the app and do not apply with auto-reloading.\n\n:param host: start server with this host (defaults to `'127.0.0.1` in native mode, otherwise `'0.0.0.0'`)\n:param port: use this port (default: `8080`)\n:param title: page title (default: `'NiceGUI'`, can be overwritten per page)\n:param viewport: page meta viewport content (default: `'width=device-width, initial-scale=1'`, can be overwritten per page)\n:param favicon: relative filepath, absolute URL to a favicon (default: `None`, NiceGUI icon will be used) or emoji (e.g. `'\ud83d\ude80'`, works for most browsers)\n:param dark: whether to use Quasar's dark mode (default: `False`, use `None` for \"auto\" mode)\n:param language: language for Quasar elements (default: `'en-US'`)\n:param binding_refresh_interval: time between binding updates (default: `0.1` seconds, bigger is more CPU friendly)\n:param reconnect_timeout: maximum time the server waits for the browser to reconnect (default: 3.0 seconds)\n:param show: automatically open the UI in a browser tab (default: `True`)\n:param on_air: tech preview: `allows temporary remote access <https://nicegui.io/documentation#nicegui_on_air>`_ if set to `True` (default: disabled)\n:param native: open the UI in a native window of size 800x600 (default: `False`, deactivates `show`, automatically finds an open port)\n:param window_size: open the UI in a native window with the provided size (e.g. `(1024, 786)`, default: `None`, also activates `native`)\n:param fullscreen: open the UI in a fullscreen window (default: `False`, also activates `native`)\n:param frameless: open the UI in a frameless window (default: `False`, also activates `native`)\n:param reload: automatically reload the UI on file changes (default: `True`)\n:param uvicorn_logging_level: logging level for uvicorn server (default: `'warning'`)\n:param uvicorn_reload_dirs: string with comma-separated list for directories to be monitored (default is current working directory only)\n:param uvicorn_reload_includes: string with comma-separated list of glob-patterns which trigger reload on modification (default: `'*.py'`)\n:param uvicorn_reload_excludes: string with comma-separated list of glob-patterns which should be ignored for reload (default: `'.*, .py[cod], .sw.*, ~*'`)\n:param tailwind: whether to use Tailwind (experimental, default: `True`)\n:param prod_js: whether to use the production version of Vue and Quasar dependencies (default: `True`)\n:param endpoint_documentation: control what endpoints appear in the autogenerated OpenAPI docs (default: 'none', options: 'none', 'internal', 'page', 'all')\n:param storage_secret: secret key for browser-based storage (default: `None`, a value is required to enable ui.storage.individual and ui.storage.browser)\n:param kwargs: additional keyword arguments are passed to `uvicorn.run`    \n",
    "url": "/documentation/run#ui_run"
  },
  {
    "title": "ui.run: Emoji favicon",
    "content": "You can use an emoji as favicon.\nThis works in Chrome, Firefox and Safari.\n",
    "url": "/documentation/run#emoji_favicon"
  },
  {
    "title": "ui.run: Base64 favicon",
    "content": "You can also use an base64-encoded image as favicon.\n",
    "url": "/documentation/run#base64_favicon"
  },
  {
    "title": "ui.run: SVG favicon",
    "content": "And directly use an SVG as favicon.\nWorks in Chrome, Firefox and Safari.\n",
    "url": "/documentation/run#svg_favicon"
  },
  {
    "title": "Configuration & Deployment: URLs",
    "content": "You can access the list of all URLs on which the NiceGUI app is available via `app.urls`.\nThe URLs are not available in `app.on_startup` because the server is not yet running.\nInstead, you can access them in a page function or register a callback with `app.urls.on_change`.\n",
    "url": "/documentation/section_configuration_deployment#urls"
  },
  {
    "title": "Configuration & Deployment: ui.run",
    "content": "You can call `ui.run()` with optional arguments.\nMost of them only apply after stopping and fully restarting the app and do not apply with auto-reloading.\n\n:param host: start server with this host (defaults to `'127.0.0.1` in native mode, otherwise `'0.0.0.0'`)\n:param port: use this port (default: `8080`)\n:param title: page title (default: `'NiceGUI'`, can be overwritten per page)\n:param viewport: page meta viewport content (default: `'width=device-width, initial-scale=1'`, can be overwritten per page)\n:param favicon: relative filepath, absolute URL to a favicon (default: `None`, NiceGUI icon will be used) or emoji (e.g. `'\ud83d\ude80'`, works for most browsers)\n:param dark: whether to use Quasar's dark mode (default: `False`, use `None` for \"auto\" mode)\n:param language: language for Quasar elements (default: `'en-US'`)\n:param binding_refresh_interval: time between binding updates (default: `0.1` seconds, bigger is more CPU friendly)\n:param reconnect_timeout: maximum time the server waits for the browser to reconnect (default: 3.0 seconds)\n:param show: automatically open the UI in a browser tab (default: `True`)\n:param on_air: tech preview: `allows temporary remote access <https://nicegui.io/documentation#nicegui_on_air>`_ if set to `True` (default: disabled)\n:param native: open the UI in a native window of size 800x600 (default: `False`, deactivates `show`, automatically finds an open port)\n:param window_size: open the UI in a native window with the provided size (e.g. `(1024, 786)`, default: `None`, also activates `native`)\n:param fullscreen: open the UI in a fullscreen window (default: `False`, also activates `native`)\n:param frameless: open the UI in a frameless window (default: `False`, also activates `native`)\n:param reload: automatically reload the UI on file changes (default: `True`)\n:param uvicorn_logging_level: logging level for uvicorn server (default: `'warning'`)\n:param uvicorn_reload_dirs: string with comma-separated list for directories to be monitored (default is current working directory only)\n:param uvicorn_reload_includes: string with comma-separated list of glob-patterns which trigger reload on modification (default: `'*.py'`)\n:param uvicorn_reload_excludes: string with comma-separated list of glob-patterns which should be ignored for reload (default: `'.*, .py[cod], .sw.*, ~*'`)\n:param tailwind: whether to use Tailwind (experimental, default: `True`)\n:param prod_js: whether to use the production version of Vue and Quasar dependencies (default: `True`)\n:param endpoint_documentation: control what endpoints appear in the autogenerated OpenAPI docs (default: 'none', options: 'none', 'internal', 'page', 'all')\n:param storage_secret: secret key for browser-based storage (default: `None`, a value is required to enable ui.storage.individual and ui.storage.browser)\n:param kwargs: additional keyword arguments are passed to `uvicorn.run`    \n",
    "url": "/documentation/section_configuration_deployment#ui_run"
  },
  {
    "title": "Configuration & Deployment: Native Mode",
    "content": "You can enable native mode for NiceGUI by specifying `native=True` in the `ui.run` function.\nTo customize the initial window size and display mode, use the `window_size` and `fullscreen` parameters respectively.\nAdditionally, you can provide extra keyword arguments via `app.native.window_args` and `app.native.start_args`.\nPick any parameter as it is defined by the internally used [pywebview module](https://pywebview.flowrl.com/guide/api.html)\nfor the `webview.create_window` and `webview.start` functions.\nNote that these keyword arguments will take precedence over the parameters defined in `ui.run`.\n\nIn native mode the `app.native.main_window` object allows you to access the underlying window.\nIt is an async version of [`Window` from pywebview](https://pywebview.flowrl.com/guide/api.html#window-object).\n",
    "url": "/documentation/section_configuration_deployment#native_mode"
  },
  {
    "title": "Configuration & Deployment: Environment Variables",
    "content": "You can set the following environment variables to configure NiceGUI:\n\n- `MATPLOTLIB` (default: true) can be set to `false` to avoid the potentially costly import of Matplotlib.\n    This will make `ui.pyplot` and `ui.line_plot` unavailable.\n- `NICEGUI_STORAGE_PATH` (default: local \".nicegui\") can be set to change the location of the storage files.\n- `MARKDOWN_CONTENT_CACHE_SIZE` (default: 1000): The maximum number of Markdown content snippets that are cached in memory.\n",
    "url": "/documentation/section_configuration_deployment#environment_variables"
  },
  {
    "title": "Configuration & Deployment: Server Hosting",
    "content": "\n            To deploy your NiceGUI app on a server, you will need to execute your `main.py` (or whichever file contains your `ui.run(...)`) on your cloud infrastructure.\n            You can, for example, just install the [NiceGUI python package via pip](https://pypi.org/project/nicegui/) and use systemd or similar service to start the main script.\n            In most cases, you will set the port to 80 (or 443 if you want to use HTTPS) with the `ui.run` command to make it easily accessible from the outside.\n\n            A convenient alternative is the use of our [pre-built multi-arch Docker image](https://hub.docker.com/r/zauberzeug/nicegui) which contains all necessary dependencies.\n            With this command you can launch the script `main.py` in the current directory on the public port 80:\n        ",
    "url": "/documentation/section_configuration_deployment#server_hosting"
  },
  {
    "title": "Configuration & Deployment: None",
    "content": null,
    "url": "/documentation/section_configuration_deployment#None"
  },
  {
    "title": "Configuration & Deployment: ",
    "content": "\n            The demo assumes `main.py` uses the port 8080 in the `ui.run` command (which is the default).\n            The `-d` tells docker to run in background and `--restart always` makes sure the container is restarted if the app crashes or the server reboots.\n            Of course this can also be written in a Docker compose file:\n        ",
    "url": "/documentation/section_configuration_deployment#None"
  },
  {
    "title": "Configuration & Deployment: None",
    "content": null,
    "url": "/documentation/section_configuration_deployment#None"
  },
  {
    "title": "Configuration & Deployment: ",
    "content": "\n            There are other handy features in the Docker image like non-root user execution and signal pass-through.\n            For more details we recommend to have a look at our [Docker example](https://github.com/zauberzeug/nicegui/tree/main/examples/docker_image).\n\n            You can provide SSL certificates directly using [FastAPI](https://fastapi.tiangolo.com/deployment/https/).\n            In production we also like using reverse proxies like [Traefik](https://doc.traefik.io/traefik/) or [NGINX](https://www.nginx.com/) to handle these details for us.\n            See our development [docker-compose.yml](https://github.com/zauberzeug/nicegui/blob/main/docker-compose.yml) as an example.\n\n            You may also have a look at [our demo for using a custom FastAPI app](https://github.com/zauberzeug/nicegui/tree/main/examples/fastapi).\n            This will allow you to do very flexible deployments as described in the [FastAPI documentation](https://fastapi.tiangolo.com/deployment/).\n            Note that there are additional steps required to allow multiple workers.\n        ",
    "url": "/documentation/section_configuration_deployment#None"
  },
  {
    "title": "Configuration & Deployment: Package for Installation",
    "content": "\n            NiceGUI apps can also be bundled into an executable with [PyInstaller](https://www.pyinstaller.org/).\n            This allows you to distribute your app as a single file that can be executed on any computer.\n\n            Just take care your `ui.run` command does not use the `reload` argument.\n            Running the `build.py` below will create an executable `myapp` in the `dist` folder:\n        ",
    "url": "/documentation/section_configuration_deployment#package_for_installation"
  },
  {
    "title": "Configuration & Deployment: None",
    "content": null,
    "url": "/documentation/section_configuration_deployment#None"
  },
  {
    "title": "Configuration & Deployment: ",
    "content": "\n            **Packaging Tips:**\n\n            - When building a PyInstaller app, your main script can use a native window (rather than a browser window) by\n            using `ui.run(reload=False, native=True)`.\n            The `native` parameter can be `True` or `False` depending on whether you want a native window or to launch a\n            page in the user's browser - either will work in the PyInstaller generated app.\n\n            - Specifying `--windowed` to PyInstaller will prevent a terminal console from appearing.\n            However you should only use this option if you have also specified `native=True` in your `ui.run` command.\n            Without a terminal console the user won't be able to exit the app by pressing Ctrl-C.\n            With the `native=True` option, the app will automatically close when the window is closed, as expected.\n\n            - Specifying `--windowed` to PyInstaller will create an `.app` file on Mac which may be more convenient to distribute.\n            When you double-click the app to run it, it will not show any console output.\n            You can also run the app from the command line with `./myapp.app/Contents/MacOS/myapp` to see the console output.\n\n            - Specifying `--onefile` to PyInstaller will create a single executable file.\n            Whilst convenient for distribution, it will be slower to start up.\n            This is not NiceGUI's fault but just the way Pyinstaller zips things into a single file, then unzips everything\n            into a temporary directory before running.\n            You can mitigate this by removing `--onefile` from the PyInstaller command,\n            and zip up the generated `dist` directory yourself, distribute it,\n            and your end users can unzip once and be good to go,\n            without the constant expansion of files due to the `--onefile` flag.\n            \n            - Summary of user experience for different options:\n\n                | PyInstaller              | `ui.run(...)`  | Explanation |\n                | :---                     | :---           | :---        |\n                | `onefile`                | `native=False` | Single executable generated in `dist/`, runs in browser |\n                | `onefile`                | `native=True`  | Single executable generated in `dist/`, runs in popup window |\n                | `onefile` and `windowed` | `native=True`  | Single executable generated in `dist/` (on Mac a proper `dist/myapp.app` generated incl. icon), runs in popup window, no console appears |\n                | `onefile` and `windowed` | `native=False` | Avoid (no way to exit the app) |\n                | Specify neither          |                | A `dist/myapp` directory created which can be zipped manually and distributed; run with `dist/myapp/myapp` |\n\n            - If you are using a Python virtual environment, ensure you `pip install pyinstaller` within your virtual environment\n            so that the correct PyInstaller is used, or you may get broken apps due to the wrong version of PyInstaller being picked up.\n            That is why the build script invokes PyInstaller using `python -m PyInstaller` rather than just `pyinstaller`.\n        ",
    "url": "/documentation/section_configuration_deployment#None"
  },
  {
    "title": "Configuration & Deployment: None",
    "content": null,
    "url": "/documentation/section_configuration_deployment#None"
  },
  {
    "title": "Configuration & Deployment: ",
    "content": "\n            **Note:**\n            If you're getting an error \"TypeError: a bytes-like object is required, not 'str'\", try adding the following lines to the top of your `main.py` file:\n            ```py\n            import sys\n            sys.stdout = open('logs.txt', 'w')\n            ```\n            See <https://github.com/zauberzeug/nicegui/issues/681> for more information.\n        ",
    "url": "/documentation/section_configuration_deployment#None"
  },
  {
    "title": "Configuration & Deployment: NiceGUI On Air",
    "content": "\n            By using `ui.run(on_air=True)` you can share your local app with others over the internet \ud83e\uddde.\n\n            When accessing the on-air URL, all libraries (like Vue, Quasar, ...) are loaded from our CDN.\n            Thereby only the raw content and events need to be transmitted by your local app.\n            This makes it blazing fast even if your app only has a poor internet connection (e.g. a mobile robot in the field).\n\n            By setting `on_air=True` you will get a random URL which is valid for 1 hour.\n            If you sign-up at <https://on-air.nicegui.io> you get a token which could be used to identify your device: `ui.run(on_air='<your token>'`).\n            This will give you a fixed URL and the possibility to protect remote access with a passphrase.\n\n            Currently On Air is available as a tech preview and can be used free of charge (for now).\n            We will gradually improve stability, introduce payment options and extend the service with multi-device management, remote terminal access and more.\n            Please let us know your feedback on [GitHub](https://github.com/zauberzeug/nicegui/discussions),\n            [Reddit](https://www.reddit.com/r/nicegui/), or [Discord](https://discord.gg/TEpFeAaF4f).\n\n            **Data Privacy:**\n            We take your privacy very serious.\n            NiceGUI On Air does not log or store any content of the relayed data.\n        ",
    "url": "/documentation/section_configuration_deployment#nicegui_on_air"
  },
  {
    "title": "NiceGUI Documentation: Overview",
    "content": "\n            NiceGUI is an open-source Python library to write graphical user interfaces which run in the browser.\n            It has a very gentle learning curve while still offering the option for advanced customizations.\n            NiceGUI follows a backend-first philosophy:\n            It handles all the web development details.\n            You can focus on writing Python code. \n            This makes it ideal for a wide range of projects including short \n            scripts, dashboards, robotics projects, IoT solutions, smart home automation, and machine learning.\n        ",
    "url": "/documentation/#overview"
  },
  {
    "title": "NiceGUI Documentation: How to use this guide",
    "content": "\n            This documentation explains how to use NiceGUI.\n            Each of the tiles covers a NiceGUI topic in detail.\n            It is recommended to start by reading this entire introduction page, then refer to other sections as needed.\n        ",
    "url": "/documentation/#how_to_use_this_guide"
  },
  {
    "title": "NiceGUI Documentation: Basic concepts",
    "content": "\n            NiceGUI provides UI _components_ (or _elements_) such as buttons, sliders, text, images, charts, and more.\n            Your app assembles these components into _pages_.\n            When the user interacts with an item on a page, NiceGUI triggers an _event_ (or _action_).\n            You define code to _handle_ each event, such as what to do when a user clicks a button named \"Go\".\n\n            Components are arranged on a page using _layouts_.\n            Layouts provide things like grids, tabs, carousels, expansions, menus, and other tools to arrange your components.\n            Many components are linked to a _model_ (data object) in your code, which automatically updates the user interface when the value changes.\n\n            Styling and appearance can be controlled in several ways.\n            NiceGUI accepts optional arguments for certain styling, such as icons on buttons.\n            Other styling can be set with functions such as `.styles`, `.classes`, or `.props` that you'll learn about later.\n            Global styles like colors and fonts can be set with dedicated properties.\n            Or if you prefer, almost anything can be styled with CSS.\n        ",
    "url": "/documentation/#basic_concepts"
  },
  {
    "title": "NiceGUI Documentation: None",
    "content": null,
    "url": "/documentation/#None"
  },
  {
    "title": "NiceGUI Documentation: Actions",
    "content": "\n            NiceGUI runs an event loop to handle user input and other events like timers and keyboard bindings.\n            You can write asynchronous functions for long-running tasks to keep the UI responsive.\n            The _Actions_ section covers how to work with events.\n        ",
    "url": "/documentation/#actions"
  },
  {
    "title": "NiceGUI Documentation: Implementation",
    "content": "\n            NiceGUI is implemented with HTML components served by an HTTP server (FastAPI), even for native windows.\n            If you already know HTML, everything will feel very familiar.\n            If you don't know HTML, that's fine too!\n            NiceGUI abstracts away the details, so you can focus on creating beautiful interfaces without worrying about how they are implemented.\n        ",
    "url": "/documentation/#implementation"
  },
  {
    "title": "NiceGUI Documentation: Running NiceGUI Apps",
    "content": "\n            There are several options for deploying NiceGUI.\n            By default, NiceGUI runs a server on localhost and runs your app as a private web page on the local machine.\n            When run this way, your app appears in a web browser window.\n            You can also run NiceGUI in a native window separate from a web browser.\n            Or you can run NiceGUI on a server that handles many clients - the website you're reading right now is served from NiceGUI.\n\n            After creating your app pages with components, you call `ui.run()` to start the NiceGUI server.\n            Optional parameters to `ui.run` set things like the network address and port the server binds to, \n            whether the app runs in native mode, initial window size, and many other options.\n            The section _Configuration and Deployment_ covers the options to the `ui.run()` function and the FastAPI framework it is based on.\n        ",
    "url": "/documentation/#running_nicegui_apps"
  },
  {
    "title": "NiceGUI Documentation: Customization",
    "content": "\n            If you want more customization in your app, you can use the underlying Tailwind classes and Quasar components\n            to control the style or behavior of your components.\n            You can also extend the available components by subclassing existing NiceGUI components or importing new ones from Quasar.\n            All of this is optional.\n            Out of the box, NiceGUI provides everything you need to make modern, stylish, responsive user interfaces.\n        ",
    "url": "/documentation/#customization"
  },
  {
    "title": "Example: Slideshow",
    "content": "implements a keyboard-controlled image slideshow",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/slideshow/"
  },
  {
    "title": "Example: Authentication",
    "content": "shows how to use sessions to build a login screen",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/authentication/main.py"
  },
  {
    "title": "Example: Modularization",
    "content": "provides an example of how to modularize your application into multiple files and reuse code",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/modularization/"
  },
  {
    "title": "Example: FastAPI",
    "content": "illustrates the integration of NiceGUI with an existing FastAPI application",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/fastapi/"
  },
  {
    "title": "Example: Map",
    "content": "demonstrates wrapping the JavaScript library [leaflet](https://leafletjs.com/) to display a map at specific locations",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/map/"
  },
  {
    "title": "Example: AI Interface",
    "content": "utilizes the [replicate](https://replicate.com) library to perform voice-to-text transcription and generate images from prompts with Stable Diffusion",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/ai_interface/"
  },
  {
    "title": "Example: 3D Scene",
    "content": "creates a webGL view and loads an STL mesh illuminated with a spotlight",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/3d_scene/"
  },
  {
    "title": "Example: Custom Vue Component",
    "content": "shows how to write and integrate a custom Vue component",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/custom_vue_component/"
  },
  {
    "title": "Example: Image Mask Overlay",
    "content": "shows how to overlay an image with a mask",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/image_mask_overlay/"
  },
  {
    "title": "Example: Infinite Scroll",
    "content": "presents an infinitely scrolling image gallery",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/infinite_scroll/main.py"
  },
  {
    "title": "Example: OpenCV Webcam",
    "content": "uses OpenCV to capture images from a webcam",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/opencv_webcam/"
  },
  {
    "title": "Example: SVG Clock",
    "content": "displays an analog clock by updating an SVG with `ui.timer`",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/svg_clock/main.py"
  },
  {
    "title": "Example: Progress",
    "content": "demonstrates a progress bar for heavy computations",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/progress/main.py"
  },
  {
    "title": "Example: NGINX Subpath",
    "content": "shows the setup to serve an app behind a reverse proxy subpath",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/nginx_subpath/"
  },
  {
    "title": "Example: Script Executor",
    "content": "executes scripts on selection and displays the output",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/script_executor/"
  },
  {
    "title": "Example: Local File Picker",
    "content": "demonstrates a dialog for selecting files locally on the server",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/local_file_picker/"
  },
  {
    "title": "Example: Search as you type",
    "content": "using public API of thecocktaildb.com to search for cocktails",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/search_as_you_type/main.py"
  },
  {
    "title": "Example: Menu and Tabs",
    "content": "uses Quasar to create foldable menu and tabs inside a header bar",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/menu_and_tabs/main.py"
  },
  {
    "title": "Example: Todo list",
    "content": "shows a simple todo list with checkboxes and text input",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/todo_list/main.py"
  },
  {
    "title": "Example: Trello Cards",
    "content": "shows Trello-like cards that can be dragged and dropped into columns",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/trello_cards/"
  },
  {
    "title": "Example: Slots",
    "content": "shows how to use scoped slots to customize Quasar elements",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/slots/main.py"
  },
  {
    "title": "Example: Table and slots",
    "content": "shows how to use component slots in a table",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/table_and_slots/main.py"
  },
  {
    "title": "Example: Single Page App",
    "content": "navigate without reloading the page",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/single_page_app/"
  },
  {
    "title": "Example: Chat App",
    "content": "a simple chat app",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/chat_app/main.py"
  },
  {
    "title": "Example: Chat with AI",
    "content": "a simple chat app with AI",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/chat_with_ai/"
  },
  {
    "title": "Example: SQLite Database",
    "content": "CRUD operations on a SQLite database with async-support through Tortoise ORM",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/sqlite_database/"
  },
  {
    "title": "Example: Pandas DataFrame",
    "content": "displays an editable [pandas](https://pandas.pydata.org) DataFrame",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/pandas_dataframe/main.py"
  },
  {
    "title": "Example: Lightbox",
    "content": "a thumbnail gallery where each image can be clicked to enlarge",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/lightbox/main.py"
  },
  {
    "title": "Example: ROS2",
    "content": "Using NiceGUI as web interface for a ROS2 robot",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/ros2/"
  },
  {
    "title": "Example: Docker Image",
    "content": "use the official [zauberzeug/nicegui](https://hub.docker.com/r/zauberzeug/nicegui) docker image",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/docker_image/"
  },
  {
    "title": "Example: Download Text as File",
    "content": "providing in-memory data like strings as file download",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/download_text_as_file/main.py"
  },
  {
    "title": "Example: Generate PDF",
    "content": "create an SVG preview and PDF download from input form elements",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/generate_pdf/"
  },
  {
    "title": "Example: Custom Binding",
    "content": "create a custom binding for a label with a bindable background color",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/custom_binding/main.py"
  },
  {
    "title": "Example: Descope Auth",
    "content": "login form and user profile using [Descope](https://descope.com)",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/descope_auth/"
  },
  {
    "title": "Example: Editable table",
    "content": "editable table allowing to add, edit, delete rows",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/editable_table/main.py"
  },
  {
    "title": "Example: Editable AG Grid",
    "content": "editable AG Grid allowing to add, edit, delete rows",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/editable_ag_grid/main.py"
  }
]